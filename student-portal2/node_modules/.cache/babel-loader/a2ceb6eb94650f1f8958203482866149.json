{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js\";\nimport React, { Component } from 'react';\nimport countdown from 'countdown';\nimport './Modal.css';\nimport 'react-notifications/lib/notifications.css';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\nclass Modal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createNotification = type => {\n      return () => {\n        switch (type) {\n          case 'success':\n            this.confirmSite();\n            NotificationManager.success('Site Added Successfully!');\n            break;\n          // case 'success':\n          //   NotificationManager.success('Success message', 'Title here');\n          //   break;\n\n          case 'expired':\n            NotificationManager.error(React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 20\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"modal-wrapper\",\n              style: {\n                transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                opacity: this.props.show ? '1' : '0'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"modal-header\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 26\n              },\n              __self: this\n            }, React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 27\n              },\n              __self: this\n            }, \"Infusion Tracker\"), React.createElement(\"span\", {\n              className: \"close-modal-btn\",\n              onClick: this.props.close,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 28\n              },\n              __self: this\n            }, \"\\xD7\")), React.createElement(\"div\", {\n              className: \"modal-body\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 31\n              },\n              __self: this\n            }, React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            }, \"This site will expire in:\"), this.state.timer), React.createElement(\"div\", {\n              className: \"modal-footer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 39\n              },\n              __self: this\n            }, React.createElement(\"button\", {\n              className: \"btn-cancel\",\n              onClick: this.props.close,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40\n              },\n              __self: this\n            }, \"Close\")))));\n            break;\n          // case 'error':\n          //   NotificationManager.error('Error message', 'Click me!', 5000, () => {\n          //     alert('callback');\n          //   });\n          //   break;\n        }\n      };\n    };\n\n    this.state = {\n      timer: \"\"\n    };\n\n    this.cancel = event => {\n      this.props.removeLastAddedArea();\n    };\n\n    this.confirmSite = event => {\n      this.props.beginSiteTracker();\n      this.props.areasSubmitHandler();\n      this.props.close();\n      this.createNotification('info'); // window.location.reload(false)\n    };\n  }\n\n  componentDidMount() {\n    let initialDate = new Date(this.props.selectedArea.date);\n    let expireDate = new Date(initialDate);\n    expireDate.setDate(initialDate.getDate() + 3);\n    let cooldownDate = new Date(initialDate);\n    cooldownDate.setDate(initialDate.getDate() + 14);\n    this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000);\n    this.setState({\n      cooldown: countdown(new Date(), cooldownDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      cooldown: countdown(new Date(), cooldownDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000); // setInterval(\n    //     () => {\n    //         // if(expireDate > new Date() ){\n    //             this.props.updateSelectedAreaColor()\n    //         // }\n    //     },\n    //     3000\n    // )\n  }\n\n  render() {\n    let modalMessage = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    });\n\n    if (this.props.selectedArea.savedArea == true) {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"This site will expire in:\"), this.state.timer), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Close\"))));\n    } else {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Do you want to confirm this as your current site?\")), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        className: \"btn-continue\",\n        onClick: this.createNotification('success'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Confirm\"))));\n    }\n\n    if (this.props.selectedArea.fillColor == \"red\") {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"This site is on cooldown for:\"), this.state.cooldown), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Close\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, modalMessage, React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js"],"names":["React","Component","countdown","NotificationContainer","NotificationManager","Modal","createNotification","type","confirmSite","success","error","transform","props","show","opacity","close","state","timer","cancel","event","removeLastAddedArea","beginSiteTracker","areasSubmitHandler","componentDidMount","initialDate","Date","selectedArea","date","expireDate","setDate","getDate","cooldownDate","setState","DAYS","HOURS","MINUTES","SECONDS","toString","setInterval","cooldown","render","modalMessage","savedArea","fillColor"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,aAAP;AACA,OAAO,2CAAP;AACA,SAAQC,qBAAR,EAA+BC,mBAA/B,QAAyD,qBAAzD;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAE1BK,kBAF0B,GAEJC,IAAD,IAAU;AAC3B,aAAO,MAAM;AACX,gBAAQA,IAAR;AACE,eAAK,SAAL;AACE,iBAAKC,WAAL;AACAJ,YAAAA,mBAAmB,CAACK,OAApB,CAA4B,0BAA5B;AACA;AACF;AACA;AACA;;AACA,eAAK,SAAL;AACEL,YAAAA,mBAAmB,CAACM,KAApB,CAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACzB;AAAK,cAAA,SAAS,EAAC,eAAf;AACI,cAAA,KAAK,EAAE;AACHC,gBAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,IAAX,GAAkB,iBAAlB,GAAsC,oBAD9C;AAEHC,gBAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,IAAX,GAAkB,GAAlB,GAAwB;AAF9B,eADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAKI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI;AAAM,cAAA,SAAS,EAAC,iBAAhB;AAAkC,cAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,CALJ,EAUI;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,EAGI,KAAKC,KAAL,CAAWC,KAHf,CAVJ,EAkBI;AAAK,cAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA;AAAQ,cAAA,SAAS,EAAC,YAAlB;AAA+B,cAAA,OAAO,EAAE,KAAKL,KAAL,CAAWG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,CAlBJ,CADyB,CAA3B;AAyBA;AACF;AACA;AACA;AACA;AACA;AAvCF;AAyCD,OA1CD;AA2CD,KA9CuB;;AAAA,SAiD1BC,KAjD0B,GAiDlB;AACJC,MAAAA,KAAK,EAAE;AADH,KAjDkB;;AAAA,SA+F1BC,MA/F0B,GA+FhBC,KAAD,IAAW;AAChB,WAAKP,KAAL,CAAWQ,mBAAX;AAGH,KAnGyB;;AAAA,SAuG1BZ,WAvG0B,GAuGXW,KAAD,IAAW;AAErB,WAAKP,KAAL,CAAWS,gBAAX;AACA,WAAKT,KAAL,CAAWU,kBAAX;AACA,WAAKV,KAAL,CAAWG,KAAX;AACA,WAAKT,kBAAL,CAAwB,MAAxB,EALqB,CAOrB;AAIH,KAlHyB;AAAA;;AAuD1BiB,EAAAA,iBAAiB,GAAE;AACf,QAAIC,WAAW,GAAI,IAAIC,IAAJ,CAAS,KAAKb,KAAL,CAAWc,YAAX,CAAwBC,IAAjC,CAAnB;AACA,QAAIC,UAAU,GAAG,IAAIH,IAAJ,CAASD,WAAT,CAAjB;AACAI,IAAAA,UAAU,CAACC,OAAX,CAAmBL,WAAW,CAACM,OAAZ,KAAsB,CAAzC;AACA,QAAIC,YAAY,GAAG,IAAIN,IAAJ,CAASD,WAAT,CAAnB;AACAO,IAAAA,YAAY,CAACF,OAAb,CAAqBL,WAAW,CAACM,OAAZ,KAAsB,EAA3C;AAEA,SAAKE,QAAL,CAAc;AAACf,MAAAA,KAAK,EAAEf,SAAS,CAAC,IAAIuB,IAAJ,EAAD,EAAaG,UAAb,EAAwB1B,SAAS,CAAC+B,IAAV,GAAgB/B,SAAS,CAACgC,KAA1B,GAAgChC,SAAS,CAACiC,OAA1C,GAAkDjC,SAAS,CAACkC,OAApF,CAAT,CAAsGC,QAAtG;AAAR,KAAd;AAEAC,IAAAA,WAAW,CACP,MAAM,KAAKN,QAAL,CAAc;AAACf,MAAAA,KAAK,EAAEf,SAAS,CAAC,IAAIuB,IAAJ,EAAD,EAAaG,UAAb,EAAyB1B,SAAS,CAAC+B,IAAV,GAAe/B,SAAS,CAACgC,KAAzB,GAA+BhC,SAAS,CAACiC,OAAzC,GAAiDjC,SAAS,CAACkC,OAApF,CAAT,CAAsGC,QAAtG;AAAR,KAAd,CADC,EAEP,IAFO,CAAX;AAMA,SAAKL,QAAL,CAAc;AAACO,MAAAA,QAAQ,EAAErC,SAAS,CAAC,IAAIuB,IAAJ,EAAD,EAAaM,YAAb,EAA0B7B,SAAS,CAAC+B,IAAV,GAAgB/B,SAAS,CAACgC,KAA1B,GAAgChC,SAAS,CAACiC,OAA1C,GAAkDjC,SAAS,CAACkC,OAAtF,CAAT,CAAwGC,QAAxG;AAAX,KAAd;AACAC,IAAAA,WAAW,CACP,MAAM,KAAKN,QAAL,CAAc;AAACO,MAAAA,QAAQ,EAAErC,SAAS,CAAC,IAAIuB,IAAJ,EAAD,EAAaM,YAAb,EAA2B7B,SAAS,CAAC+B,IAAV,GAAe/B,SAAS,CAACgC,KAAzB,GAA+BhC,SAAS,CAACiC,OAAzC,GAAiDjC,SAAS,CAACkC,OAAtF,CAAT,CAAwGC,QAAxG;AAAX,KAAd,CADC,EAEP,IAFO,CAAX,CAhBe,CAwBf;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEH;;AA6BDG,EAAAA,MAAM,GAAE;AAGJ,QAAIC,YAAY,GACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;;AAKA,QAAI,KAAK7B,KAAL,CAAWc,YAAX,CAAwBgB,SAAxB,IAAqC,IAAzC,EAA8C;AAC1CD,MAAAA,YAAY,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,eAAf;AACI,QAAA,KAAK,EAAE;AACH9B,UAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,IAAX,GAAkB,iBAAlB,GAAsC,oBAD9C;AAEHC,UAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,IAAX,GAAkB,GAAlB,GAAwB;AAF9B,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAkC,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CALJ,EAUI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAGI,KAAKC,KAAL,CAAWC,KAHf,CAVJ,EAkBI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,CAlBJ,CADA,CADJ;AA6BH,KA9BD,MA+BK;AACD0B,MAAAA,YAAY,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,eAAf;AACI,QAAA,KAAK,EAAE;AACH9B,UAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,IAAX,GAAkB,iBAAlB,GAAsC,oBAD9C;AAEHC,UAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,IAAX,GAAkB,GAAlB,GAAwB;AAF9B,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAkC,QAAA,OAAO,EAAE,KAAKK,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CALJ,EAUI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADJ,CAVJ,EAaI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAE,KAAKA,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEI;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,OAAO,EAAE,KAAKZ,kBAAL,CAAwB,SAAxB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,CAbJ,CADA,CADJ;AAwBH;;AACD,QAAI,KAAKM,KAAL,CAAWc,YAAX,CAAwBiB,SAAxB,IAAqC,KAAzC,EAA+C;AAC3CF,MAAAA,YAAY,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,eAAf;AACI,QAAA,KAAK,EAAE;AACH9B,UAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,IAAX,GAAkB,iBAAlB,GAAsC,oBAD9C;AAEHC,UAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWC,IAAX,GAAkB,GAAlB,GAAwB;AAF9B,SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAkC,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CALJ,EAUI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADJ,EAGI,KAAKC,KAAL,CAAWuB,QAHf,CAVJ,EAkBI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,CAlBJ,CADA,CADJ;AA8BH;;AAGD,WAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGS0B,YAHT,EAKQ,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR,CAHJ;AAaH;;AAtOyB;;AA0O9B,eAAepC,KAAf","sourcesContent":["import React, {Component} from 'react';\nimport countdown from 'countdown'\nimport './Modal.css';\nimport 'react-notifications/lib/notifications.css';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nclass Modal extends Component {\n   \n    createNotification = (type) => {\n        return () => {\n          switch (type) {\n            case 'success':\n              this.confirmSite();\n              NotificationManager.success('Site Added Successfully!') ;\n              break;\n            // case 'success':\n            //   NotificationManager.success('Success message', 'Title here');\n            //   break;\n            case 'expired':\n              NotificationManager.error( <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site will expire in:</p>\n                    {   \n                        this.state.timer\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>);\n              break;\n            // case 'error':\n            //   NotificationManager.error('Error message', 'Click me!', 5000, () => {\n            //     alert('callback');\n            //   });\n            //   break;\n          }\n        };\n      };\n\n\n    state = {\n        timer: \"\"\n    \n    }\n\n\n    componentDidMount(){\n        let initialDate  = new Date(this.props.selectedArea.date)\n        let expireDate = new Date(initialDate)\n        expireDate.setDate(initialDate.getDate()+3);\n        let cooldownDate = new Date(initialDate)\n        cooldownDate.setDate(initialDate.getDate()+14);\n\n        this.setState({timer: countdown(new Date(), expireDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n\n        setInterval(\n            () => this.setState({timer: countdown(new Date(), expireDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n            \n        )\n        \n        this.setState({cooldown: countdown(new Date(), cooldownDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n        setInterval(\n            () => this.setState({cooldown: countdown(new Date(), cooldownDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n            \n            \n        )\n      \n\n        // setInterval(\n        //     () => {\n        //         // if(expireDate > new Date() ){\n        //             this.props.updateSelectedAreaColor()\n        //         // }\n        //     },\n        //     3000\n            \n        // )\n\n    }\n  \n\n   \n\n   \n    cancel = (event) => {\n        this.props.removeLastAddedArea()\n        \n        \n    }\n\n\n\n    confirmSite = (event) => {\n        \n        this.props.beginSiteTracker()\n        this.props.areasSubmitHandler()\n        this.props.close()\n        this.createNotification('info')\n        \n        // window.location.reload(false)\n      \n\n        \n    };\n    \n    \n    \n    render(){\n        \n        \n        let modalMessage = (\n            <div></div>\n\n        )\n        \n        if (this.props.selectedArea.savedArea == true){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site will expire in:</p>\n                    {   \n                        this.state.timer\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>\n\n            )\n            \n        }\n        else {\n            modalMessage =( \n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.cancel}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>Do you want to confirm this as your current site?</p>\n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.cancel}>Cancel</button>\n                        <button className=\"btn-continue\" onClick={this.createNotification('success')}>Confirm</button>\n                    </div>\n                    </div>\n                </div>\n                       \n                   \n            )\n        }\n        if (this.props.selectedArea.fillColor == \"red\"){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site is on cooldown for:</p>\n                    {   \n                        this.state.cooldown\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>\n\n            )\n         \n            \n        }\n\n\n        return (\n\n            \n            <div>\n            \n            \n                    {modalMessage}\n                \n                    <NotificationContainer/>\n                </div>\n            \n            \n        );\n    }\n\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}