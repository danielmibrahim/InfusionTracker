{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js\";\nimport React from 'react';\nimport './Modal.css';\nimport axios from 'axios';\n\nconst Modal = props => {\n  const email = localStorage.getItem(\"loggedInStudent\");\n  console.log(\"area ::> \", email);\n  axios.get(\"http://localhost:8080/sites/findSites/\".concat(email)).then(response => {\n    console.log(response.data);\n    let areasFromDb = response.data.map((record, index) => {\n      return {\n        name: index,\n        shape: record.shape,\n        coords: [record.xCoord, record.yCoord, 5],\n        fillColor: record.fillColor,\n        preFillColor: record.fillColor,\n        date: record.dateStarted,\n        savedArea: true\n      };\n    });\n    this.setState({\n      areas: areasFromDb\n    });\n  }).catch(error => {});\n\n  let cancel = event => {\n    props.removeLastAddedArea();\n  };\n\n  let confirmSite = event => {\n    props.beginSiteTracker();\n    props.areasSubmitHandler();\n    props.close();\n  };\n\n  console.log(\"Timer props -> \", props.selectedArea.date);\n  let initialDate = new Date(props.selectedArea.date);\n  let expireDate = new Date(initialDate);\n  console.log(\"expire date ::> \", expireDate);\n  let modalMessage = React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  });\n\n  if (this.props.state.savedArea = true) {\n    console.log(props.selectedArea.savedArea);\n    console.log(props.selectedArea);\n    modalMessage = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-wrapper\",\n      style: {\n        transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n        opacity: props.show ? '1' : '0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Infusion Tracker\"), React.createElement(\"span\", {\n      className: \"close-modal-btn\",\n      onClick: cancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"\\xD7\")), React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"This site expires on:\"), expireDate.getMonth(), \"/\", expireDate.getDate() + 3), React.createElement(\"div\", {\n      className: \"modal-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn-cancel\",\n      onClick: props.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Close\"))));\n  }\n\n  if (props.selectedArea.savedArea = false) {\n    modalMessage = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal-wrapper\",\n      style: {\n        transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n        opacity: props.show ? '1' : '0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, props.children, \"Do you want to confirm this as your current infusion site?\"), React.createElement(\"div\", {\n      className: \"modal-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Infusion Tracker\"))), React.createElement(\"div\", {\n      className: \"modal-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn-cancel\",\n      onClick: cancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"button\", {\n      className: \"btn-continue\",\n      onClick: confirmSite,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Confirm\")));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, modalMessage);\n};\n\nexport default Modal;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js"],"names":["React","axios","Modal","props","email","localStorage","getItem","console","log","get","then","response","data","areasFromDb","map","record","index","name","shape","coords","xCoord","yCoord","fillColor","preFillColor","date","dateStarted","savedArea","setState","areas","catch","error","cancel","event","removeLastAddedArea","confirmSite","beginSiteTracker","areasSubmitHandler","close","selectedArea","initialDate","Date","expireDate","modalMessage","state","transform","show","opacity","getMonth","getDate","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Modal.css';\nimport axios from 'axios';\n\n\n\nconst Modal = (props) => {\n\n    \n    const email = localStorage.getItem(\"loggedInStudent\");\n    console.log(\"area ::> \", email)\n    axios.get(`http://localhost:8080/sites/findSites/${email}`)\n        .then(response => {\n            console.log(response.data)\n            let areasFromDb = response.data\n                .map((record, index) => {\n                    return {\n                        name: index,\n                        shape: record.shape,\n                        coords: [record.xCoord, record.yCoord, 5],\n                        fillColor: record.fillColor,\n                        preFillColor: record.fillColor,\n                        date: record.dateStarted,\n                        savedArea: true\n                    }\n                })\n            this.setState({ areas: areasFromDb })\n        }).catch(error => {\n        })\n\n    let cancel = (event) => {\n        props.removeLastAddedArea()\n    }\n\n\n    let confirmSite = (event) => {\n        props.beginSiteTracker()\n        props.areasSubmitHandler()\n        props.close()\n\n    };\n    console.log(\"Timer props -> \", props.selectedArea.date)\n    let initialDate  = new Date(props.selectedArea.date)\n    let expireDate = new Date(initialDate)\n    console.log(\"expire date ::> \", expireDate)\n\n    \n\n    let modalMessage = (\n        <div></div>\n\n    ) \n    if (this.props.state.savedArea=true){\n        console.log(props.selectedArea.savedArea)\n        console.log(props.selectedArea)\n        modalMessage=(\n            <div>\n            <div className=\"modal-wrapper\"\n                style={{\n                    transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                    opacity: props.show ? '1' : '0'\n                }}>\n                <div className=\"modal-header\">\n                    <h3>Infusion Tracker</h3>\n                    <span className=\"close-modal-btn\" onClick={cancel}>×</span>\n                </div>\n\n                 <div className=\"modal-body\">\n                    <p>This site expires on:</p>\n                {expireDate.getMonth()}/{expireDate.getDate()+3} \n                   \n                   \n                 </div> \n                <div className=\"modal-footer\">\n                <button className=\"btn-cancel\" onClick={props.close}>Close</button>\n                 </div>\n                 </div>\n             </div>\n\n        )\n        \n    }\n    if(props.selectedArea.savedArea=false)\n    {\n        modalMessage =( \n            <div>\n                <div className=\"modal-wrapper\"\n                style={{\n                    transform: props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                    opacity: props.show ? '1' : '0'\n                }}></div>\n        <div className=\"modal-body\">\n                <p>\n                    {props.children}\n                    Do you want to confirm this as your current infusion site?\n                </p>\n                <div className=\"modal-header\">\n                    <h3>Infusion Tracker</h3>\n                   \n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn-cancel\" onClick={cancel}>Cancel</button>\n                <button className=\"btn-continue\" onClick={confirmSite}>Confirm</button>\n            </div>\n            </div>\n        )\n    }\n\n    \n   \n  \n\n    return (\n        <div>\n        \n                {modalMessage}\n               \n                \n            </div>\n        \n    )\n\n}\n\nexport default Modal;\n\n"]},"metadata":{},"sourceType":"module"}