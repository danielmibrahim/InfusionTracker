{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/body/Body.js\";\nimport React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/Capstone/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport Timer from 'react-compound-timer';\n\nclass Body extends Component {\n  constructor() {\n    super();\n\n    this.openModalHandler = area => {\n      console.log(\"selectedArea \", area);\n      this.setState({\n        isShowing: true,\n        selectedArea: area\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        isShowing: false\n      });\n    };\n\n    this.updateArea = evt => {\n      let newArea = {\n        name: \"1\",\n        shape: \"circle\",\n        coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5],\n        fillColor: \"green\",\n        preFillColor: \"green\"\n      }; // const areas = this.state.areas\n\n      this.setState({\n        areas: [...this.state.areas, newArea],\n        isShowing: true,\n        selectedArea: newArea\n      });\n    };\n\n    this.removeLastAddedArea = () => {\n      let areas = this.state.areas;\n      areas.pop();\n      this.setState({\n        areas: [...areas],\n        isShowing: false,\n        selectedArea: undefined\n      });\n    };\n\n    this.areasSubmitHandler = event => {\n      // event.preventDefault();\n      if (this.state.selectedArea.savedArea != true) {\n        const email = localStorage.getItem(\"loggedInStudent\");\n        console.log(\"area ::> \", this.state.selectedArea);\n        axios.post(\"http://localhost:8080/sites/add-site/\".concat(email), {\n          xCoord: this.state.selectedArea.coords[0],\n          yCoord: this.state.selectedArea.coords[1],\n          shape: this.state.selectedArea.shape,\n          fillColor: this.state.selectedArea.fillColor,\n          siteStudent: this.state.loggedInStudent\n        }).then(response => {}).catch(error => {});\n      } // axios.get('http://localhost:8080/findSites')\n      // .then(response => {\n      //     this.setState(\n      //         {\n      //             siteLocations: response.data\n      //         }\n      //     )\n      // })\n\n    };\n\n    this.beginSiteTracker = () => {\n      this.setState({\n        preFillColor: \"green\"\n      });\n    };\n\n    this.confirmMessage = \"Do you want to confirm this as your current infusion site location?\";\n    this.state = {\n      isShowing: false,\n      preFillColor: \"white\",\n      areas: [],\n      selectedArea: undefined\n    };\n  }\n\n  componentDidMount() {\n    const email = localStorage.getItem(\"loggedInStudent\");\n    console.log(\"area ::> \", email);\n    axios.get(\"http://localhost:8080/sites/findSites/\".concat(email)).then(response => {\n      console.log(response.data);\n      let areasFromDb = response.data.map((record, index) => {\n        return {\n          name: index,\n          shape: record.shape,\n          coords: [record.xCoord, record.yCoord, 5],\n          fillColor: record.fillColor,\n          preFillColor: record.fillColor,\n          date: record.dateStarted,\n          savedArea: true\n        };\n      });\n      this.setState({\n        areas: areasFromDb\n      });\n    }).catch(error => {});\n  }\n\n  render() {\n    if (this.state.savedArea != true) {\n      Modal = Modal;\n    } else {\n      Modal = timerModal;\n    }\n\n    console.log(this.state);\n    let MAP = {\n      name: \"my-map\",\n      areas: this.state.areas\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.state.isShowing ? React.createElement(\"div\", {\n      onClick: this.closeModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }) : null, this.state.selectedArea ? React.createElement(Modal, {\n      show: this.state.isShowing,\n      close: this.closeModalHandler,\n      beginSiteTracker: this.beginSiteTracker,\n      areasSubmitHandler: this.areasSubmitHandler,\n      removeLastAddedArea: this.removeLastAddedArea,\n      selectedArea: this.state.selectedArea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }) : \"\", React.createElement(\"div\", {\n      className: \"imagemap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(ImageMapper, {\n      src: MaleBody,\n      fillColor: this.state.preFillColor,\n      map: MAP,\n      width: 710,\n      height: 535,\n      button: true,\n      className: \"open-modal-btn\",\n      onClick: area => this.openModalHandler(area),\n      onImageClick: evt => this.updateArea(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/body/Body.js"],"names":["React","Component","ImageMapper","MaleBody","Modal","axios","Timer","Body","constructor","openModalHandler","area","console","log","setState","isShowing","selectedArea","closeModalHandler","updateArea","evt","newArea","name","shape","coords","nativeEvent","layerX","layerY","fillColor","preFillColor","areas","state","removeLastAddedArea","pop","undefined","areasSubmitHandler","event","savedArea","email","localStorage","getItem","post","xCoord","yCoord","siteStudent","loggedInStudent","then","response","catch","error","beginSiteTracker","confirmMessage","componentDidMount","get","data","areasFromDb","map","record","index","date","dateStarted","render","timerModal","MAP"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/Capstone/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport Timer from 'react-compound-timer'\n\n\nclass Body extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\n\t\tthis.state = {\n\t\t\tisShowing: false,\n\t\t\tpreFillColor: \"white\",\n\t\t\tareas: [],\n\t\t\tselectedArea: undefined\n\n\t\t}\n\n\t}\n\n\tcomponentDidMount() {\n\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\tconsole.log(\"area ::> \", email)\n\t\taxios.get(`http://localhost:8080/sites/findSites/${email}`)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response.data)\n\t\t\t\tlet areasFromDb = response.data\n\t\t\t\t\t.map((record, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: index,\n\t\t\t\t\t\t\tshape: record.shape,\n\t\t\t\t\t\t\tcoords: [record.xCoord, record.yCoord, 5],\n\t\t\t\t\t\t\tfillColor: record.fillColor,\n\t\t\t\t\t\t\tpreFillColor: record.fillColor,\n\t\t\t\t\t\t\tdate: record.dateStarted,\n\t\t\t\t\t\t\tsavedArea: true\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\tthis.setState({ areas: areasFromDb })\n\t\t\t}).catch(error => {\n\t\t\t})\n\n\n\n\n\t}\n\n\topenModalHandler = (area) => {\n\t\tconsole.log(\"selectedArea \", area)\n\t\tthis.setState({\n\t\t\tisShowing: true,\n\t\t\tselectedArea: area\n\t\t});\n\t}\n\n\n\tcloseModalHandler = () => {\n\t\tthis.setState({\n\t\t\tisShowing: false\n\t\t});\n\t}\n\n\tupdateArea = (evt) => {\n\t\tlet newArea = { name: \"1\", shape: \"circle\", coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5], fillColor: \"green\", preFillColor: \"green\" }\n\t\t// const areas = this.state.areas\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...this.state.areas, newArea],\n\t\t\t\tisShowing: true,\n\t\t\t\tselectedArea: newArea\n\t\t\t}\n\t\t)\n\n\t}\n\n\tremoveLastAddedArea = () => {\n\t\tlet areas = this.state.areas\n\t\tareas.pop()\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...areas],\n\t\t\t\tisShowing: false,\n\t\t\t\tselectedArea: undefined\n\t\t\t}\n\t\t)\n\t}\n\n\tareasSubmitHandler = (event) => {\n\t\t// event.preventDefault();\n\n\t\tif (this.state.selectedArea.savedArea != true) {\n\t\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\t\tconsole.log(\"area ::> \", this.state.selectedArea)\n\t\t\taxios.post(`http://localhost:8080/sites/add-site/${email}`, {\n\t\t\t\txCoord: this.state.selectedArea.coords[0],\n\t\t\t\tyCoord: this.state.selectedArea.coords[1],\n\t\t\t\tshape: this.state.selectedArea.shape,\n\t\t\t\tfillColor: this.state.selectedArea.fillColor,\n\t\t\t\tsiteStudent: this.state.loggedInStudent\n\n\t\t\t})\n\t\t\t\t.then(response => {\n\n\t\t\t\t}).catch(error => {\n\t\t\t\t})\n\t\t}\n\n\t\t// axios.get('http://localhost:8080/findSites')\n\t\t// .then(response => {\n\t\t//     this.setState(\n\t\t//         {\n\t\t//             siteLocations: response.data\n\t\t//         }\n\t\t//     )\n\t\t// })\n\n\n\n\t}\n\n\tbeginSiteTracker = () => {\n\n\t\tthis.setState({\n\t\t\tpreFillColor: \"green\"\n\n\t\t});\n\n\n\t}\n\n\tconfirmMessage = (\"Do you want to confirm this as your current infusion site location?\")\n\n\n\n\trender() {\n\t\tif (this.state.savedArea != true) {\nModal = Modal\n\t\t}\n\t\telse {\n\nModal = timerModal\n\t\t}\n\n\n\t\tconsole.log(this.state)\n\n\n\n\t\tlet MAP = {\n\t\t\tname: \"my-map\",\n\t\t\tareas: this.state.areas\n\t\t}\n\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.isShowing ? <div onClick={this.closeModalHandler} ></div> : null}\n\n\t\t\t\t{\n\t\t\t\t\tthis.state.selectedArea?\n\t\t\t\t\t<Modal\n\t\t\t\t\t\tshow={this.state.isShowing}\n\t\t\t\t\t\tclose={this.closeModalHandler}\n\t\t\t\t\t\tbeginSiteTracker={this.beginSiteTracker}\n\t\t\t\t\t\tareasSubmitHandler={this.areasSubmitHandler}\n\t\t\t\t\t\tremoveLastAddedArea={this.removeLastAddedArea}\n\t\t\t\t\t\tselectedArea={this.state.selectedArea}\n\n\t\t\t\t\t></Modal> : \"\"\n\t\t\t\t}\n\n\t\t\t\t<div className=\"imagemap\">\n\t\t\t\t\t<ImageMapper src={MaleBody} fillColor={this.state.preFillColor} map={MAP} width={710} height={535}\n\t\t\t\t\t\tbutton className=\"open-modal-btn\"\n\n\n\t\t\t\t\t\tonClick={(area) => this.openModalHandler(area)}\n\t\t\t\t\t\tonImageClick={(evt) => this.updateArea(evt)}\n\n\t\t\t\t\t>\n\n\n\t\t\t\t\t</ImageMapper>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\n\n\n\n\n\n\t\t);\n\t}\n}\n\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}