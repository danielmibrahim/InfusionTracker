{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(_x, _x2, _x3) {\n  var _again = true;\n\n  _function: while (_again) {\n    var object = _x,\n        property = _x2,\n        receiver = _x3;\n    _again = false;\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        _x = parent;\n        _x2 = property;\n        _x3 = receiver;\n        _again = true;\n        desc = parent = undefined;\n        continue _function;\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  }\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactFastCompare = require(\"react-fast-compare\");\n\nvar _reactFastCompare2 = _interopRequireDefault(_reactFastCompare);\n\nvar ImageMapper = function (_Component) {\n  _inherits(ImageMapper, _Component);\n\n  function ImageMapper(props) {\n    var _this = this;\n\n    _classCallCheck(this, ImageMapper);\n\n    _get(Object.getPrototypeOf(ImageMapper.prototype), \"constructor\", this).call(this, props);\n\n    [\"drawrect\", \"drawcircle\", \"drawpoly\", \"initCanvas\", \"renderPrefilledAreas\"].forEach(function (f) {\n      return _this[f] = _this[f].bind(_this);\n    });\n    var absPos = {\n      position: \"absolute\",\n      top: 0,\n      left: 0\n    };\n    this.styles = {\n      container: {\n        position: \"relative\"\n      },\n      canvas: _extends({}, absPos, {\n        pointerEvents: \"none\",\n        zIndex: 2\n      }),\n      img: _extends({}, absPos, {\n        zIndex: 1,\n        userSelect: \"none\"\n      }),\n      map: props.onClick && {\n        cursor: \"pointer\"\n      } || undefined\n    }; // Props watched for changes to trigger update\n\n    this.watchedProps = [\"active\", \"fillColor\", \"height\", \"imgWidth\", \"lineWidth\", \"src\", \"strokeColor\", \"width\"];\n  }\n\n  _createClass(ImageMapper, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _this2 = this;\n\n      var propChanged = this.watchedProps.some(function (prop) {\n        return _this2.props[prop] !== nextProps[prop];\n      });\n      return !(0, _reactFastCompare2[\"default\"])(this.props.map, this.state.map) || propChanged;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.updateCacheMap();\n    }\n  }, {\n    key: \"updateCacheMap\",\n    value: function updateCacheMap() {\n      this.setState({\n        map: JSON.parse(JSON.stringify(this.props.map))\n      }, this.initCanvas);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateCacheMap();\n      this.initCanvas();\n    }\n  }, {\n    key: \"drawrect\",\n    value: function drawrect(coords, fillColor, lineWidth, strokeColor) {\n      var _coords = _slicedToArray(coords, 4);\n\n      var left = _coords[0];\n      var top = _coords[1];\n      var right = _coords[2];\n      var bot = _coords[3];\n      this.ctx.fillStyle = fillColor;\n      this.ctx.lineWidth = lineWidth;\n      this.ctx.strokeStyle = strokeColor;\n      this.ctx.strokeRect(left, top, right - left, bot - top);\n      this.ctx.fillRect(left, top, right - left, bot - top);\n      this.ctx.fillStyle = this.props.fillColor;\n    }\n  }, {\n    key: \"drawcircle\",\n    value: function drawcircle(coords, fillColor, lineWidth, strokeColor) {\n      this.ctx.fillStyle = fillColor;\n      this.ctx.beginPath();\n      this.ctx.lineWidth = lineWidth;\n      this.ctx.strokeStyle = strokeColor;\n      this.ctx.arc(coords[0], coords[1], coords[2], 0, 2 * Math.PI);\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.ctx.fill();\n      this.ctx.fillStyle = this.props.fillColor;\n    }\n  }, {\n    key: \"drawpoly\",\n    value: function drawpoly(coords, fillColor, lineWidth, strokeColor) {\n      var _this3 = this;\n\n      coords = coords.reduce(function (a, v, i, s) {\n        return i % 2 ? a : [].concat(_toConsumableArray(a), [s.slice(i, i + 2)]);\n      }, []);\n      this.ctx.fillStyle = fillColor;\n      this.ctx.beginPath();\n      this.ctx.lineWidth = lineWidth;\n      this.ctx.strokeStyle = strokeColor;\n      var first = coords.unshift();\n      this.ctx.moveTo(first[0], first[1]);\n      coords.forEach(function (c) {\n        return _this3.ctx.lineTo(c[0], c[1]);\n      });\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.ctx.fill();\n      this.ctx.fillStyle = this.props.fillColor;\n    }\n  }, {\n    key: \"initCanvas\",\n    value: function initCanvas() {\n      if (this.props.width) this.img.width = this.props.width;\n      if (this.props.height) this.img.height = this.props.height;\n      this.canvas.width = this.props.width || this.img.clientWidth;\n      this.canvas.height = this.props.height || this.img.clientHeight;\n      this.container.style.width = (this.props.width || this.img.clientWidth) + \"px\";\n      this.container.style.height = (this.props.height || this.img.clientHeight) + \"px\";\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.ctx.fillStyle = this.props.fillColor; //this.ctx.strokeStyle = this.props.strokeColor;\n\n      if (this.props.onLoad) this.props.onLoad();\n      this.renderPrefilledAreas();\n    }\n  }, {\n    key: \"hoverOn\",\n    value: function hoverOn(area, index, event) {\n      var shape = event.target.getAttribute(\"shape\");\n\n      if (this.props.active && this[\"draw\" + shape]) {\n        this[\"draw\" + shape](event.target.getAttribute(\"coords\").split(\",\"), area.fillColor, area.lineWidth || this.props.lineWidth, area.strokeColor || this.props.strokeColor);\n      }\n\n      if (this.props.onMouseEnter) this.props.onMouseEnter(area, index, event);\n    }\n  }, {\n    key: \"hoverOff\",\n    value: function hoverOff(area, index, event) {\n      if (this.props.active) {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.renderPrefilledAreas();\n      }\n\n      if (this.props.onMouseLeave) this.props.onMouseLeave(area, index, event);\n    }\n  }, {\n    key: \"click\",\n    value: function click(area, index, event) {\n      if (this.props.onClick) {\n        event.preventDefault();\n        this.props.onClick(area, index, event);\n      }\n    }\n  }, {\n    key: \"imageClick\",\n    value: function imageClick(event) {\n      if (this.props.onImageClick) {\n        event.preventDefault();\n        this.props.onImageClick(event);\n      }\n    }\n  }, {\n    key: \"mouseMove\",\n    value: function mouseMove(area, index, event) {\n      if (this.props.onMouseMove) {\n        this.props.onMouseMove(area, index, event);\n      }\n    }\n  }, {\n    key: \"imageMouseMove\",\n    value: function imageMouseMove(area, index, event) {\n      if (this.props.onImageMouseMove) {\n        this.props.onImageMouseMove(area, index, event);\n      }\n    }\n  }, {\n    key: \"scaleCoords\",\n    value: function scaleCoords(coords) {\n      var _props = this.props;\n      var imgWidth = _props.imgWidth;\n      var width = _props.width; // calculate scale based on current 'width' and the original 'imgWidth'\n\n      var scale = width && imgWidth && imgWidth > 0 ? width / imgWidth : 1;\n      return coords.map(function (coord) {\n        return coord * scale;\n      });\n    }\n  }, {\n    key: \"renderPrefilledAreas\",\n    value: function renderPrefilledAreas() {\n      var _this4 = this;\n\n      this.state.map.areas.map(function (area) {\n        if (!area.preFillColor) return;\n\n        _this4[\"draw\" + area.shape](_this4.scaleCoords(area.coords), area.preFillColor, area.lineWidth || _this4.props.lineWidth, area.strokeColor || _this4.props.strokeColor);\n      });\n    }\n  }, {\n    key: \"computeCenter\",\n    value: function computeCenter(area) {\n      if (!area) return [0, 0];\n      var scaledCoords = this.scaleCoords(area.coords);\n\n      switch (area.shape) {\n        case \"circle\":\n          return [scaledCoords[0], scaledCoords[1]];\n\n        case \"poly\":\n        case \"rect\":\n        default:\n          {\n            var _ret = function () {\n              // Calculate centroid\n              var n = scaledCoords.length / 2;\n\n              var _scaledCoords$reduce = scaledCoords.reduce(function (_ref, val, idx) {\n                var y = _ref.y;\n                var x = _ref.x;\n                return !(idx % 2) ? {\n                  y: y,\n                  x: x + val / n\n                } : {\n                  y: y + val / n,\n                  x: x\n                };\n              }, {\n                y: 0,\n                x: 0\n              });\n\n              var y = _scaledCoords$reduce.y;\n              var x = _scaledCoords$reduce.x;\n              return {\n                v: [x, y]\n              };\n            }();\n\n            if (typeof _ret === \"object\") return _ret.v;\n          }\n      }\n    }\n  }, {\n    key: \"renderAreas\",\n    value: function renderAreas() {\n      var _this5 = this;\n\n      return this.state.map.areas.map(function (area, index) {\n        var scaledCoords = _this5.scaleCoords(area.coords);\n\n        var center = _this5.computeCenter(area);\n\n        var extendedArea = _extends({}, area, {\n          scaledCoords: scaledCoords,\n          center: center\n        });\n\n        return _react2[\"default\"].createElement(\"area\", {\n          key: area._id || index,\n          shape: area.shape,\n          coords: scaledCoords.join(\",\"),\n          onMouseEnter: _this5.hoverOn.bind(_this5, extendedArea, index),\n          onMouseLeave: _this5.hoverOff.bind(_this5, extendedArea, index),\n          onMouseMove: _this5.mouseMove.bind(_this5, extendedArea, index),\n          onClick: _this5.click.bind(_this5, extendedArea, index),\n          href: area.href\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      return _react2[\"default\"].createElement(\"div\", {\n        style: this.styles.container,\n        ref: function (node) {\n          return _this6.container = node;\n        }\n      }, _react2[\"default\"].createElement(\"img\", {\n        style: this.styles.img,\n        src: this.props.src,\n        useMap: \"#\" + this.state.map.name,\n        alt: \"\",\n        ref: function (node) {\n          return _this6.img = node;\n        },\n        onLoad: this.initCanvas,\n        onClick: this.imageClick.bind(this),\n        onMouseMove: this.imageMouseMove.bind(this)\n      }), _react2[\"default\"].createElement(\"canvas\", {\n        ref: function (node) {\n          return _this6.canvas = node;\n        },\n        style: this.styles.canvas\n      }), _react2[\"default\"].createElement(\"map\", {\n        name: this.state.map.name,\n        style: this.styles.map\n      }, this.renderAreas()));\n    }\n  }]);\n\n  return ImageMapper;\n}(_react.Component);\n\nexports[\"default\"] = ImageMapper;\nImageMapper.defaultProps = {\n  active: true,\n  fillColor: \"rgba(255, 255, 255, 0.5)\",\n  lineWidth: 1,\n  map: {\n    areas: [],\n    name: \"image-map-\" + Math.random()\n  },\n  strokeColor: \"rgba(0, 0, 0, 0.5)\"\n};\nImageMapper.propTypes = {\n  active: _propTypes2[\"default\"].bool,\n  fillColor: _propTypes2[\"default\"].string,\n  height: _propTypes2[\"default\"].number,\n  imgWidth: _propTypes2[\"default\"].number,\n  lineWidth: _propTypes2[\"default\"].number,\n  src: _propTypes2[\"default\"].string.isRequired,\n  strokeColor: _propTypes2[\"default\"].string,\n  width: _propTypes2[\"default\"].number,\n  onClick: _propTypes2[\"default\"].func,\n  onMouseMove: _propTypes2[\"default\"].func,\n  onImageClick: _propTypes2[\"default\"].func,\n  onImageMouseMove: _propTypes2[\"default\"].func,\n  onLoad: _propTypes2[\"default\"].func,\n  onMouseEnter: _propTypes2[\"default\"].func,\n  onMouseLeave: _propTypes2[\"default\"].func,\n  map: _propTypes2[\"default\"].shape({\n    areas: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].shape({\n      area: _propTypes2[\"default\"].shape({\n        coords: _propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].number),\n        href: _propTypes2[\"default\"].string,\n        shape: _propTypes2[\"default\"].string,\n        preFillColor: _propTypes2[\"default\"].string,\n        fillColor: _propTypes2[\"default\"].string\n      })\n    })),\n    name: _propTypes2[\"default\"].string\n  })\n};\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}