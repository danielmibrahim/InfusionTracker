{"ast":null,"code":"import _slicedToArray from \"/Users/Danny/Documents/student-portal2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/Danny/Documents/student-portal2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Danny/Documents/student-portal2/src/components/body/Body.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport isEqual from \"react-fast-compare\";\nimport { ImageMapper } from 'react-image-mapper';\nexport default class Body extends Component {\n  constructor(props) {\n    super(props);\n    [\"drawrect\", \"drawcircle\", \"drawpoly\", \"initCanvas\", \"renderPrefilledAreas\"].forEach(f => this[f] = this[f].bind(this));\n    let absPos = {\n      position: \"absolute\",\n      top: 0,\n      left: 0\n    };\n    this.styles = {\n      container: {\n        position: \"relative\"\n      },\n      canvas: _objectSpread({}, absPos, {\n        pointerEvents: \"none\",\n        zIndex: 2\n      }),\n      img: _objectSpread({}, absPos, {\n        zIndex: 1,\n        userSelect: \"none\"\n      }),\n      map: props.onClick && {\n        cursor: \"pointer\"\n      } || undefined\n    }; // Props watched for changes to trigger update\n\n    this.watchedProps = [\"active\", \"fillColor\", \"height\", \"imgWidth\", \"lineWidth\", \"src\", \"strokeColor\", \"width\"];\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const propChanged = this.watchedProps.some(prop => this.props[prop] !== nextProps[prop]);\n    return !isEqual(this.props.map, this.state.map) || propChanged;\n  }\n\n  componentWillMount() {\n    this.updateCacheMap();\n  }\n\n  updateCacheMap() {\n    this.setState({\n      map: JSON.parse(JSON.stringify(this.props.map))\n    }, this.initCanvas);\n  }\n\n  componentDidUpdate() {\n    this.updateCacheMap();\n    this.initCanvas();\n  }\n\n  drawrect(coords, fillColor, lineWidth, strokeColor) {\n    let _coords = _slicedToArray(coords, 4),\n        left = _coords[0],\n        top = _coords[1],\n        right = _coords[2],\n        bot = _coords[3];\n\n    this.ctx.fillStyle = fillColor;\n    this.ctx.lineWidth = lineWidth;\n    this.ctx.strokeStyle = strokeColor;\n    this.ctx.strokeRect(left, top, right - left, bot - top);\n    this.ctx.fillRect(left, top, right - left, bot - top);\n    this.ctx.fillStyle = this.props.fillColor;\n  }\n\n  drawcircle(coords, fillColor, lineWidth, strokeColor) {\n    this.ctx.fillStyle = fillColor;\n    this.ctx.beginPath();\n    this.ctx.lineWidth = lineWidth;\n    this.ctx.strokeStyle = strokeColor;\n    this.ctx.arc(coords[0], coords[1], coords[2], 0, 2 * Math.PI);\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill();\n    this.ctx.fillStyle = this.props.fillColor;\n  }\n\n  drawpoly(coords, fillColor, lineWidth, strokeColor) {\n    coords = coords.reduce((a, v, i, s) => i % 2 ? a : [...a, s.slice(i, i + 2)], []);\n    this.ctx.fillStyle = fillColor;\n    this.ctx.beginPath();\n    this.ctx.lineWidth = lineWidth;\n    this.ctx.strokeStyle = strokeColor;\n    let first = coords.unshift();\n    this.ctx.moveTo(first[0], first[1]);\n    coords.forEach(c => this.ctx.lineTo(c[0], c[1]));\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill();\n    this.ctx.fillStyle = this.props.fillColor;\n  }\n\n  initCanvas() {\n    if (this.props.width) this.img.width = this.props.width;\n    if (this.props.height) this.img.height = this.props.height;\n    this.canvas.width = this.props.width || this.img.clientWidth;\n    this.canvas.height = this.props.height || this.img.clientHeight;\n    this.container.style.width = (this.props.width || this.img.clientWidth) + \"px\";\n    this.container.style.height = (this.props.height || this.img.clientHeight) + \"px\";\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.fillStyle = this.props.fillColor; //this.ctx.strokeStyle = this.props.strokeColor;\n\n    if (this.props.onLoad) this.props.onLoad();\n    this.renderPrefilledAreas();\n  }\n\n  hoverOn(area, index, event) {\n    const shape = event.target.getAttribute(\"shape\");\n\n    if (this.props.active && this[\"draw\" + shape]) {\n      this[\"draw\" + shape](event.target.getAttribute(\"coords\").split(\",\"), area.fillColor, area.lineWidth || this.props.lineWidth, area.strokeColor || this.props.strokeColor);\n    }\n\n    if (this.props.onMouseEnter) this.props.onMouseEnter(area, index, event);\n  }\n\n  hoverOff(area, index, event) {\n    if (this.props.active) {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.renderPrefilledAreas();\n    }\n\n    if (this.props.onMouseLeave) this.props.onMouseLeave(area, index, event);\n  }\n\n  click(area, index, event) {\n    if (this.props.onClick) {\n      event.preventDefault();\n      this.props.onClick(area, index, event);\n    }\n  }\n\n  imageClick(event) {\n    if (this.props.onImageClick) {\n      event.preventDefault();\n      this.props.onImageClick(event);\n    }\n  }\n\n  mouseMove(area, index, event) {\n    if (this.props.onMouseMove) {\n      this.props.onMouseMove(area, index, event);\n    }\n  }\n\n  imageMouseMove(area, index, event) {\n    if (this.props.onImageMouseMove) {\n      this.props.onImageMouseMove(area, index, event);\n    }\n  }\n\n  scaleCoords(coords) {\n    const _this$props = this.props,\n          imgWidth = _this$props.imgWidth,\n          width = _this$props.width; // calculate scale based on current 'width' and the original 'imgWidth'\n\n    const scale = width && imgWidth && imgWidth > 0 ? width / imgWidth : 1;\n    return coords.map(coord => coord * scale);\n  }\n\n  renderPrefilledAreas() {\n    this.state.map.areas.map(area => {\n      if (!area.preFillColor) return;\n      this[\"draw\" + area.shape](this.scaleCoords(area.coords), area.preFillColor, area.lineWidth || this.props.lineWidth, area.strokeColor || this.props.strokeColor);\n    });\n  }\n\n  computeCenter(area) {\n    if (!area) return [0, 0];\n    const scaledCoords = this.scaleCoords(area.coords);\n\n    switch (area.shape) {\n      case \"circle\":\n        return [scaledCoords[0], scaledCoords[1]];\n\n      case \"poly\":\n      case \"rect\":\n      default:\n        {\n          // Calculate centroid\n          const n = scaledCoords.length / 2;\n\n          const _scaledCoords$reduce = scaledCoords.reduce(({\n            y,\n            x\n          }, val, idx) => {\n            return !(idx % 2) ? {\n              y,\n              x: x + val / n\n            } : {\n              y: y + val / n,\n              x\n            };\n          }, {\n            y: 0,\n            x: 0\n          }),\n                y = _scaledCoords$reduce.y,\n                x = _scaledCoords$reduce.x;\n\n          return [x, y];\n        }\n    }\n  }\n\n  renderAreas() {\n    return this.state.map.areas.map((area, index) => {\n      const scaledCoords = this.scaleCoords(area.coords);\n      const center = this.computeCenter(area);\n\n      const extendedArea = _objectSpread({}, area, {\n        scaledCoords,\n        center\n      });\n\n      return React.createElement(\"area\", {\n        key: area._id || index,\n        shape: area.shape,\n        coords: scaledCoords.join(\",\"),\n        onMouseEnter: this.hoverOn.bind(this, extendedArea, index),\n        onMouseLeave: this.hoverOff.bind(this, extendedArea, index),\n        onMouseMove: this.mouseMove.bind(this, extendedArea, index),\n        onClick: this.click.bind(this, extendedArea, index),\n        href: area.href,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"presenter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(ImageMapper, {\n      src: URL,\n      map: MAP,\n      width: 500,\n      onLoad: () => this.load(),\n      onClick: area => this.clicked(area),\n      onMouseEnter: area => this.enterArea(area),\n      onMouseLeave: area => this.leaveArea(area),\n      onMouseMove: (area, _, evt) => this.moveOnArea(area, evt),\n      onImageClick: evt => this.clickedOutside(evt),\n      onImageMouseMove: evt => this.moveOnImage(evt),\n      lineWidth: 4,\n      strokeColor: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), this.state.hoveredArea && React.createElement(\"span\", {\n      className: \"tooltip\",\n      style: _objectSpread({}, this.getTipPosition(this.state.hoveredArea)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, this.state.hoveredArea && this.state.hoveredArea.name)), React.createElement(\"pre\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, this.state.msg ? this.state.msg : null), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, this.state.moveMsg ? this.state.moveMsg : null)));\n  }\n\n}\n{\n  /* ImageMapper.defaultProps = {\n  active: true,\n  fillColor: \"rgba(255, 255, 255, 0.5)\",\n  lineWidth: 1,\n  map: {\n  \tareas: [],\n  \tname: \"image-map-\" + Math.random()\n  },\n  strokeColor: \"rgba(0, 0, 0, 0.5)\"\n  };\n  ImageMapper.propTypes = {\n  active: PropTypes.bool,\n  fillColor: PropTypes.string,\n  height: PropTypes.number,\n  imgWidth: PropTypes.number,\n  lineWidth: PropTypes.number,\n  src: PropTypes.string.isRequired,\n  strokeColor: PropTypes.string,\n  width: PropTypes.number,\n  \tonClick: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onImageClick: PropTypes.func,\n  onImageMouseMove: PropTypes.func,\n  onLoad: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  \tmap: PropTypes.shape({\n  \tareas: PropTypes.arrayOf(\n  \t\tPropTypes.shape({\n  \t\t\tarea: PropTypes.shape({\n  \t\t\t\tcoords: PropTypes.arrayOf(PropTypes.number),\n  \t\t\t\thref: PropTypes.string,\n  \t\t\t\tshape: PropTypes.string,\n  \t\t\t\tpreFillColor: PropTypes.string,\n  \t\t\t\tfillColor: PropTypes.string\n  \t\t\t})\n  \t\t})\n  \t),\n  \tname: PropTypes.string\n  })\n  }; */\n}","map":{"version":3,"sources":["/Users/Danny/Documents/student-portal2/src/components/body/Body.js"],"names":["React","Component","PropTypes","isEqual","ImageMapper","Body","constructor","props","forEach","f","bind","absPos","position","top","left","styles","container","canvas","pointerEvents","zIndex","img","userSelect","map","onClick","cursor","undefined","watchedProps","shouldComponentUpdate","nextProps","propChanged","some","prop","state","componentWillMount","updateCacheMap","setState","JSON","parse","stringify","initCanvas","componentDidUpdate","drawrect","coords","fillColor","lineWidth","strokeColor","right","bot","ctx","fillStyle","strokeStyle","strokeRect","fillRect","drawcircle","beginPath","arc","Math","PI","closePath","stroke","fill","drawpoly","reduce","a","v","i","s","slice","first","unshift","moveTo","c","lineTo","width","height","clientWidth","clientHeight","style","getContext","onLoad","renderPrefilledAreas","hoverOn","area","index","event","shape","target","getAttribute","active","split","onMouseEnter","hoverOff","clearRect","onMouseLeave","click","preventDefault","imageClick","onImageClick","mouseMove","onMouseMove","imageMouseMove","onImageMouseMove","scaleCoords","imgWidth","scale","coord","areas","preFillColor","computeCenter","scaledCoords","n","length","y","x","val","idx","renderAreas","center","extendedArea","_id","join","href","render","URL","MAP","load","clicked","enterArea","leaveArea","_","evt","moveOnArea","clickedOutside","moveOnImage","hoveredArea","getTipPosition","name","msg","moveMsg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport isEqual from \"react-fast-compare\";\nimport { ImageMapper } from 'react-image-mapper';\n\nexport default class Body extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\t\t[\n\t\t\t\"drawrect\",\n\t\t\t\"drawcircle\",\n\t\t\t\"drawpoly\",\n\t\t\t\"initCanvas\",\n\t\t\t\"renderPrefilledAreas\"\n\t\t].forEach(f => (this[f] = this[f].bind(this)));\n\t\tlet absPos = { position: \"absolute\", top: 0, left: 0 };\n\t\tthis.styles = {\n\t\t\tcontainer: { position: \"relative\" },\n\t\t\tcanvas: { ...absPos, pointerEvents: \"none\", zIndex: 2 },\n\t\t\timg: { ...absPos, zIndex: 1, userSelect: \"none\" },\n\t\t\tmap: (props.onClick && { cursor: \"pointer\" }) || undefined\n\t\t};\n\t\t// Props watched for changes to trigger update\n\t\tthis.watchedProps = [\n\t\t\t\"active\",\n\t\t\t\"fillColor\",\n\t\t\t\"height\",\n\t\t\t\"imgWidth\",\n\t\t\t\"lineWidth\",\n\t\t\t\"src\",\n\t\t\t\"strokeColor\",\n\t\t\t\"width\"\n\t\t];\n\t}\n\n\tshouldComponentUpdate(nextProps) {\n\t\tconst propChanged = this.watchedProps.some(\n\t\t\tprop => this.props[prop] !== nextProps[prop]\n\t\t);\n\t\treturn !isEqual(this.props.map, this.state.map) || propChanged;\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.updateCacheMap();\n\t}\n\n\tupdateCacheMap() {\n\t\tthis.setState(\n\t\t\t{ map: JSON.parse(JSON.stringify(this.props.map)) },\n\t\t\tthis.initCanvas\n\t\t);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.updateCacheMap();\n\t\tthis.initCanvas();\n\t}\n\n\tdrawrect(coords, fillColor, lineWidth, strokeColor) {\n\t\tlet [left, top, right, bot] = coords;\n\t\tthis.ctx.fillStyle = fillColor;\n\t\tthis.ctx.lineWidth = lineWidth;\n\t\tthis.ctx.strokeStyle = strokeColor;\n\t\tthis.ctx.strokeRect(left, top, right - left, bot - top);\n\t\tthis.ctx.fillRect(left, top, right - left, bot - top);\n\t\tthis.ctx.fillStyle = this.props.fillColor;\n\t}\n\n\tdrawcircle(coords, fillColor, lineWidth, strokeColor) {\n\t\tthis.ctx.fillStyle = fillColor;\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.lineWidth = lineWidth;\n\t\tthis.ctx.strokeStyle = strokeColor;\n\t\tthis.ctx.arc(coords[0], coords[1], coords[2], 0, 2 * Math.PI);\n\t\tthis.ctx.closePath();\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.fill();\n\t\tthis.ctx.fillStyle = this.props.fillColor;\n\t}\n\n\tdrawpoly(coords, fillColor, lineWidth, strokeColor) {\n\t\tcoords = coords.reduce(\n\t\t\t(a, v, i, s) => (i % 2 ? a : [...a, s.slice(i, i + 2)]),\n\t\t\t[]\n\t\t);\n\t\t\n\t\tthis.ctx.fillStyle = fillColor;\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.lineWidth = lineWidth;\n\t\tthis.ctx.strokeStyle = strokeColor;\n\t\tlet first = coords.unshift();\n\t\tthis.ctx.moveTo(first[0], first[1]);\n\t\tcoords.forEach(c => this.ctx.lineTo(c[0], c[1]));\n\t\tthis.ctx.closePath();\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.fill();\n\t\tthis.ctx.fillStyle = this.props.fillColor;\n\t}\n\n\tinitCanvas() {\n\t\tif (this.props.width) this.img.width = this.props.width;\n\n\t\tif (this.props.height) this.img.height = this.props.height;\n\n\t\tthis.canvas.width = this.props.width || this.img.clientWidth;\n\t\tthis.canvas.height = this.props.height || this.img.clientHeight;\n\t\tthis.container.style.width =\n\t\t\t(this.props.width || this.img.clientWidth) + \"px\";\n\t\tthis.container.style.height =\n\t\t\t(this.props.height || this.img.clientHeight) + \"px\";\n\t\tthis.ctx = this.canvas.getContext(\"2d\");\n\t\tthis.ctx.fillStyle = this.props.fillColor;\n\t\t//this.ctx.strokeStyle = this.props.strokeColor;\n\n\t\tif (this.props.onLoad) this.props.onLoad();\n\n\t\tthis.renderPrefilledAreas();\n\t}\n\n\thoverOn(area, index, event) {\n\t\tconst shape = event.target.getAttribute(\"shape\");\n\n\t\tif (this.props.active && this[\"draw\" + shape]) {\n\t\t\tthis[\"draw\" + shape](\n\t\t\t\tevent.target.getAttribute(\"coords\").split(\",\"),\n\t\t\t\tarea.fillColor,\n\t\t\t\tarea.lineWidth || this.props.lineWidth,\n\t\t\t\tarea.strokeColor || this.props.strokeColor\n\t\t\t);\n\t\t}\n\t\tif (this.props.onMouseEnter) this.props.onMouseEnter(area, index, event);\n\t}\n\n\thoverOff(area, index, event) {\n\t\tif (this.props.active) {\n\t\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\t\tthis.renderPrefilledAreas();\n\t\t}\n\n\t\tif (this.props.onMouseLeave) this.props.onMouseLeave(area, index, event);\n\t}\n\n\tclick(area, index, event) {\n\t\tif (this.props.onClick) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.props.onClick(area, index, event);\n\t\t}\n\t}\n\n\timageClick(event) {\n\t\tif (this.props.onImageClick) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.props.onImageClick(event);\n\t\t}\n\t}\n\n\tmouseMove(area, index, event) {\n\t\tif (this.props.onMouseMove) {\n\t\t\tthis.props.onMouseMove(area, index, event);\n\t\t}\n\t}\n\n\timageMouseMove(area, index, event) {\n\t\tif (this.props.onImageMouseMove) {\n\t\t\tthis.props.onImageMouseMove(area, index, event);\n\t\t}\n\t}\n\n\tscaleCoords(coords) {\n\t\tconst { imgWidth, width } = this.props;\n\t\t// calculate scale based on current 'width' and the original 'imgWidth'\n\t\tconst scale = width && imgWidth && imgWidth > 0 ? width / imgWidth : 1;\n\t\treturn coords.map(coord => coord * scale);\n\t}\n\n\trenderPrefilledAreas() {\n\t\tthis.state.map.areas.map(area => {\n\t\t\tif (!area.preFillColor) return;\n\t\t\tthis[\"draw\" + area.shape](\n\t\t\t\tthis.scaleCoords(area.coords),\n\t\t\t\tarea.preFillColor,\n\t\t\t\tarea.lineWidth || this.props.lineWidth,\n\t\t\t\tarea.strokeColor || this.props.strokeColor\n\t\t\t);\n\t\t});\n\t}\n\n\tcomputeCenter(area) {\n\t\tif (!area) return [0, 0];\n\n\t\tconst scaledCoords = this.scaleCoords(area.coords);\n\n\t\tswitch (area.shape) {\n\t\t\tcase \"circle\":\n\t\t\t\treturn [scaledCoords[0], scaledCoords[1]];\n\t\t\tcase \"poly\":\n\t\t\tcase \"rect\":\n\t\t\tdefault: {\n\t\t\t\t// Calculate centroid\n\t\t\t\tconst n = scaledCoords.length / 2;\n\t\t\t\tconst { y, x } = scaledCoords.reduce(\n\t\t\t\t\t({ y, x }, val, idx) => {\n\t\t\t\t\t\treturn !(idx % 2) ? { y, x: x + val / n } : { y: y + val / n, x };\n\t\t\t\t\t},\n\t\t\t\t\t{ y: 0, x: 0 }\n\t\t\t\t);\n\t\t\t\treturn [x, y];\n\t\t\t}\n\t\t}\n\t}\n\n\trenderAreas() {\n\t\treturn this.state.map.areas.map((area, index) => {\n\t\t\tconst scaledCoords = this.scaleCoords(area.coords);\n\t\t\tconst center = this.computeCenter(area);\n\t\t\tconst extendedArea = { ...area, scaledCoords, center };\n\t\t\treturn (\n\t\t\t\t<area\n\t\t\t\t\tkey={area._id || index}\n\t\t\t\t\tshape={area.shape}\n\t\t\t\t\tcoords={scaledCoords.join(\",\")}\n\t\t\t\t\tonMouseEnter={this.hoverOn.bind(this, extendedArea, index)}\n\t\t\t\t\tonMouseLeave={this.hoverOff.bind(this, extendedArea, index)}\n\t\t\t\t\tonMouseMove={this.mouseMove.bind(this, extendedArea, index)}\n\t\t\t\t\tonClick={this.click.bind(this, extendedArea, index)}\n\t\t\t\t\thref={area.href}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t}\n    render() {\n        return (\n            <div className=\"grid\">\n\t\t\t\t<div className=\"presenter\">\n\t\t\t\t\t<div style={{ position: \"relative\" }}>\n\t\t\t\t\t\t<ImageMapper\n\t\t\t\t\t\t\tsrc={URL}\n\t\t\t\t\t\t\tmap={MAP}\n\t\t\t\t\t\t\twidth={500}\n\t\t\t\t\t\t\tonLoad={() => this.load()}\n\t\t\t\t\t\t\tonClick={area => this.clicked(area)}\n\t\t\t\t\t\t\tonMouseEnter={area => this.enterArea(area)}\n\t\t\t\t\t\t\tonMouseLeave={area => this.leaveArea(area)}\n\t\t\t\t\t\t\tonMouseMove={(area, _, evt) => this.moveOnArea(area, evt)}\n\t\t\t\t\t\t\tonImageClick={evt => this.clickedOutside(evt)}\n\t\t\t\t\t\t\tonImageMouseMove={evt => this.moveOnImage(evt)}\n\t\t\t\t\t\t\tlineWidth={4}\n\t\t\t\t\t\t\tstrokeColor={\"white\"}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{this.state.hoveredArea && (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName=\"tooltip\"\n\t\t\t\t\t\t\t\tstyle={{ ...this.getTipPosition(this.state.hoveredArea) }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{this.state.hoveredArea && this.state.hoveredArea.name}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<pre className=\"message\">\n\t\t\t\t\t\t{this.state.msg ? this.state.msg : null}\n\t\t\t\t\t</pre>\n\t\t\t\t\t<pre>{this.state.moveMsg ? this.state.moveMsg : null}</pre>\n\t\t\t\t</div>\n                </div>\n        );\n    }\n}\n{/* ImageMapper.defaultProps = {\n\tactive: true,\n\tfillColor: \"rgba(255, 255, 255, 0.5)\",\n\tlineWidth: 1,\n\tmap: {\n\t\tareas: [],\n\t\tname: \"image-map-\" + Math.random()\n\t},\n\tstrokeColor: \"rgba(0, 0, 0, 0.5)\"\n};\n\nImageMapper.propTypes = {\n\tactive: PropTypes.bool,\n\tfillColor: PropTypes.string,\n\theight: PropTypes.number,\n\timgWidth: PropTypes.number,\n\tlineWidth: PropTypes.number,\n\tsrc: PropTypes.string.isRequired,\n\tstrokeColor: PropTypes.string,\n\twidth: PropTypes.number,\n\n\tonClick: PropTypes.func,\n\tonMouseMove: PropTypes.func,\n\tonImageClick: PropTypes.func,\n\tonImageMouseMove: PropTypes.func,\n\tonLoad: PropTypes.func,\n\tonMouseEnter: PropTypes.func,\n\tonMouseLeave: PropTypes.func,\n\n\tmap: PropTypes.shape({\n\t\tareas: PropTypes.arrayOf(\n\t\t\tPropTypes.shape({\n\t\t\t\tarea: PropTypes.shape({\n\t\t\t\t\tcoords: PropTypes.arrayOf(PropTypes.number),\n\t\t\t\t\thref: PropTypes.string,\n\t\t\t\t\tshape: PropTypes.string,\n\t\t\t\t\tpreFillColor: PropTypes.string,\n\t\t\t\t\tfillColor: PropTypes.string\n\t\t\t\t})\n\t\t\t})\n\t\t),\n\t\tname: PropTypes.string\n\t})\n}; */}\n\n\n"]},"metadata":{},"sourceType":"module"}