{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/student-portal2/src/components/body/Body.js\";\nimport React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport Timer from 'react-compound-timer';\n\nclass Body extends Component {\n  constructor() {\n    super();\n\n    this.openModalHandler = area => {\n      console.log(\"selectedArea \", area);\n      this.setState({\n        isShowing: true,\n        selectedArea: area\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        isShowing: false\n      });\n    };\n\n    this.updateArea = evt => {\n      let newArea = {\n        name: \"1\",\n        shape: \"circle\",\n        coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5],\n        fillColor: \"green\",\n        preFillColor: \"green\"\n      }; // const areas = this.state.areas\n\n      this.setState({\n        areas: [...this.state.areas, newArea],\n        isShowing: true,\n        selectedArea: newArea\n      });\n    };\n\n    this.removeLastAddedArea = () => {\n      let areas = this.state.areas;\n      areas.pop();\n      this.setState({\n        areas: [...areas],\n        isShowing: false,\n        selectedArea: undefined\n      });\n    };\n\n    this.areasSubmitHandler = event => {\n      // event.preventDefault();\n      if (this.state.selectedArea.savedArea != true) {\n        const email = localStorage.getItem(\"loggedInStudent\");\n        console.log(\"area ::> \", this.state.selectedArea);\n        axios.post(\"http://localhost:8080/sites/add-site/\".concat(email), {\n          xCoord: this.state.selectedArea.coords[0],\n          yCoord: this.state.selectedArea.coords[1],\n          shape: this.state.selectedArea.shape,\n          fillColor: this.state.selectedArea.fillColor,\n          siteStudent: this.state.loggedInStudent\n        }).then(response => {}).catch(error => {});\n      } // axios.get('http://localhost:8080/findSites')\n      // .then(response => {\n      //     this.setState(\n      //         {\n      //             siteLocations: response.data\n      //         }\n      //     )\n      // })\n\n    };\n\n    this.beginSiteTracker = () => {\n      this.setState({\n        preFillColor: \"green\"\n      });\n    };\n\n    this.confirmMessage = \"Do you want to confirm this as your current infusion site location?\";\n    this.state = {\n      isShowing: false,\n      preFillColor: \"white\",\n      areas: [],\n      selectedArea: undefined\n    };\n  }\n\n  componentDidMount() {\n    const email = localStorage.getItem(\"loggedInStudent\");\n    console.log(\"area ::> \", email);\n    axios.get(\"http://localhost:8080/sites/findSites/\".concat(email)).then(response => {\n      console.log(response.data);\n      let areasFromDb = response.data.map((record, index) => {\n        return {\n          name: index,\n          shape: record.shape,\n          coords: [record.xCoord, record.yCoord, 5],\n          fillColor: record.fillColor,\n          preFillColor: record.fillColor,\n          date: record.dateStarted,\n          savedArea: true\n        };\n      });\n      this.setState({\n        areas: areasFromDb\n      });\n    }).catch(error => {});\n  }\n\n  render() {\n    if (this.state.preFillColor != \"green\") {} else {}\n\n    console.log(this.state);\n    let MAP = {\n      name: \"my-map\",\n      areas: this.state.areas\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, this.state.isShowing ? React.createElement(\"div\", {\n      onClick: this.closeModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }) : null, React.createElement(Modal, {\n      show: this.state.isShowing,\n      close: this.closeModalHandler,\n      beginSiteTracker: this.beginSiteTracker,\n      areasSubmitHandler: this.areasSubmitHandler,\n      removeLastAddedArea: this.removeLastAddedArea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Timer, {\n      initialTime: this.setState.areasFromDb.record.date.dateStarted,\n      direction: \"backward\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, () => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Timer.Days, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \" days\", React.createElement(Timer.Hours, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), \" hours\", React.createElement(Timer.Minutes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), \" minutes\", React.createElement(Timer.Seconds, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), \" seconds\")), this.message), React.createElement(\"div\", {\n      className: \"imagemap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(ImageMapper, {\n      src: MaleBody,\n      fillColor: this.state.preFillColor,\n      map: MAP,\n      width: 710,\n      height: 535,\n      button: true,\n      className: \"open-modal-btn\",\n      onClick: area => this.openModalHandler(area),\n      onImageClick: evt => this.updateArea(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["/Users/Danny/Documents/student-portal2/src/components/body/Body.js"],"names":["React","Component","ImageMapper","MaleBody","Modal","axios","Timer","Body","constructor","openModalHandler","area","console","log","setState","isShowing","selectedArea","closeModalHandler","updateArea","evt","newArea","name","shape","coords","nativeEvent","layerX","layerY","fillColor","preFillColor","areas","state","removeLastAddedArea","pop","undefined","areasSubmitHandler","event","savedArea","email","localStorage","getItem","post","xCoord","yCoord","siteStudent","loggedInStudent","then","response","catch","error","beginSiteTracker","confirmMessage","componentDidMount","get","data","areasFromDb","map","record","index","date","dateStarted","render","MAP","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport  ImageMapper from 'react-image-mapper';\nimport  MaleBody  from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport Timer from 'react-compound-timer'\n\n\nclass Body extends Component {\n\tconstructor() {\n        super();\n\n\n        this.state = {\n\t\t\tisShowing: false,\n\t\t\tpreFillColor: \"white\",\n\t\t\tareas: [],\n\t\t\tselectedArea: undefined\n\t\t\t\n\t\t}\n\t\t\n    }\n\n\tcomponentDidMount() {\n\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\tconsole.log(\"area ::> \",email)\n        axios.get(`http://localhost:8080/sites/findSites/${email}`)\n        .then(response => {\n\t\t\tconsole.log(response.data)\n\t\t\tlet areasFromDb = response.data\n\t\t\t\t.map( (record, index) => {\n\t\t\t\t\treturn { \n\t\t\t\t\t\tname: index, \n\t\t\t\t\t\tshape: record.shape, \n\t\t\t\t\t\tcoords: [record.xCoord, record.yCoord , 5 ], \n\t\t\t\t\t\tfillColor: record.fillColor, \n\t\t\t\t\t\tpreFillColor: record.fillColor,\n\t\t\t\t\t\tdate:  record.dateStarted,\n\t\t\t\t\t\tsavedArea: true\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\tthis.setState({areas: areasFromDb})\n        }).catch(error => {\n        })\n\t\t\n\n\t\t  \n\t\t\n\t}\n\n    openModalHandler = (area) => {\n\t\tconsole.log(\"selectedArea \", area)\n        this.setState({\n\t\t\tisShowing: true,\n\t\t\tselectedArea: area\n\t\t});\n    }\n\n\n    closeModalHandler = () => {\n        this.setState({\n            isShowing: false\n        });\n\t}\n\t\n\tupdateArea = (evt) => {\n\t\tlet newArea = { name: \"1\", shape: \"circle\", coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY , 5 ], fillColor: \"green\", preFillColor: \"green\"  }\n\t\t// const areas = this.state.areas\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...this.state.areas, newArea],\n\t\t\t\tisShowing: true,\n\t\t\t\tselectedArea: newArea\n\t\t\t}\n\t\t)\n\n\t}\n\t\n\tremoveLastAddedArea = () => {\n\t\tlet areas = this.state.areas\n\t\tareas.pop()\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...areas],\n\t\t\t\tisShowing: false,\n\t\t\t\tselectedArea: undefined\n\t\t\t}\n\t\t)\n\t}\n\n\tareasSubmitHandler = (event) => {\n\t\t// event.preventDefault();\n\n\t\tif(this.state.selectedArea.savedArea != true){\n\t\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\t\tconsole.log(\"area ::> \",this.state.selectedArea)\n\t\t\taxios.post(`http://localhost:8080/sites/add-site/${email}`,{\n\t\t\t\txCoord: this.state.selectedArea.coords[0],\n\t\t\t\tyCoord: this.state.selectedArea.coords[1],\n\t\t\t\tshape: this.state.selectedArea.shape,\n\t\t\t\tfillColor: this.state.selectedArea.fillColor,\n\t\t\t\tsiteStudent: this.state.loggedInStudent\n\t\t\t})\n\t\t\t.then(response => {\n\n\t\t\t}).catch(error => {\n\t\t\t})\n\t\t}\n\n\t\t// axios.get('http://localhost:8080/findSites')\n        // .then(response => {\n        //     this.setState(\n        //         {\n        //             siteLocations: response.data\n        //         }\n        //     )\n        // })\n\t\t\n\n\n    }\n\t\n\tbeginSiteTracker = () => {\n\n\t\tthis.setState({ preFillColor: \"green\"\t\t\n\t\n\t});\n\n\t\n\t}\n\t\nconfirmMessage = (\"Do you want to confirm this as your current infusion site location?\")\n\n\n\n    render() {\n\t\tif (this.state.preFillColor != \"green\"){\n\t\t\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tconsole.log(this.state)\n\t\t\n\n\t\t\n       let  MAP ={\n\t\t\tname: \"my-map\",\n\t\t\tareas: this.state.areas\n          }\n\t\n\t\t\n\t\t  return (\n\t\t\t<div>\n\t\t\t{ this.state.isShowing ? <div onClick={this.closeModalHandler} ></div> : null }\n\t\t\t\n\t\t\t\n\t\t\t\t<Modal\n\t\t\t\tshow={this.state.isShowing}\n\t\t\t\tclose={this.closeModalHandler}\n\t\t\t\tbeginSiteTracker={this.beginSiteTracker}\n\t\t\t\tareasSubmitHandler={this.areasSubmitHandler}\n\t\t\t\tremoveLastAddedArea={this.removeLastAddedArea}\n\n\t\t\t\t>\n\t\t\t\t\t <Timer\n                            initialTime={this.setState.areasFromDb.record.date.dateStarted}\n                            direction=\"backward\"\n>\n                        {() => (\n                             <React.Fragment>\n                            <Timer.Days /> days\n                            <Timer.Hours /> hours\n                            <Timer.Minutes /> minutes\n                            <Timer.Seconds /> seconds\n            \n                              </React.Fragment>\n                         )}\n                            </Timer>\n                       \n\t\t\t\t\t{this.message}\n\n\t\t\t\t\t</Modal>\n\t\t\t\n\t\t<div className=\"imagemap\">\n\t\t\t\t\t<ImageMapper src={MaleBody} fillColor={this.state.preFillColor} map={MAP} width={710} height={535} \n\tbutton className=\"open-modal-btn\" \n\t\n\t\n\tonClick={(area) => this.openModalHandler(area)}\n\tonImageClick={(evt) => this.updateArea(evt)}\n\t\n    >\n\t\t\n\n\t\t\t</ImageMapper>\n\t\t\t</div>\n    </div>\n\t\t\t\n\n\t\n\n\t\n\n\t\n);\n}\n}\n\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}