{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js\";\nimport React, { Component } from 'react';\nimport countdown from 'countdown';\nimport './Modal.css';\nimport 'react-notifications/lib/notifications.css';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\nclass Modal extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createNotification = type => {\n      return () => {\n        switch (type) {\n          case 'info':\n            NotificationManager.info('Info message');\n            this.props.beginSiteTracker();\n            this.props.areasSubmitHandler();\n            this.props.close(); //   window.location.reload(false)\n\n            break;\n\n          case 'success':\n            NotificationManager.success('Success message', 'Title here');\n            break;\n\n          case 'warning':\n            NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n            break;\n\n          case 'error':\n            NotificationManager.error('Error message', 'Click me!', 5000, () => {\n              alert('callback');\n            });\n            break;\n        }\n      };\n    };\n\n    this.state = {\n      timer: \"\"\n    };\n\n    this.cancel = event => {\n      this.props.removeLastAddedArea();\n    };\n  }\n\n  componentDidMount() {\n    let initialDate = new Date(this.props.selectedArea.date);\n    let expireDate = new Date(initialDate);\n    expireDate.setDate(initialDate.getDate() + 3);\n    let cooldownDate = new Date(initialDate);\n    cooldownDate.setDate(initialDate.getDate() + 14);\n    this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000);\n    this.setState({\n      cooldown: countdown(new Date(), cooldownDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      cooldown: countdown(new Date(), cooldownDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000); // setInterval(\n    //     () => {\n    //         // if(expireDate > new Date() ){\n    //             this.props.updateSelectedAreaColor()\n    //         // }\n    //     },\n    //     3000\n    // )\n  }\n\n  // confirmSite = (event) => {\n  //     this.props.beginSiteTracker()\n  //     this.props.areasSubmitHandler()\n  //     this.props.close()\n  //     this.createNotification('info')\n  //     window.location.reload(false)\n  // };\n  render() {\n    let modalMessage = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n\n    if (this.props.selectedArea.savedArea == true) {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"This site will expire in:\"), this.state.timer), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Close\"))));\n    } else {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Do you want to confirm this as your current site?\")), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        className: \"btn-continue\",\n        onClick: this.createNotification('info'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Confirm\"))));\n    }\n\n    if (this.props.selectedArea.fillColor == \"red\") {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"This site is on cooldown for:\"), this.state.cooldown), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Close\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, modalMessage, React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js"],"names":["React","Component","countdown","NotificationContainer","NotificationManager","Modal","createNotification","type","info","props","beginSiteTracker","areasSubmitHandler","close","success","warning","error","alert","state","timer","cancel","event","removeLastAddedArea","componentDidMount","initialDate","Date","selectedArea","date","expireDate","setDate","getDate","cooldownDate","setState","DAYS","HOURS","MINUTES","SECONDS","toString","setInterval","cooldown","render","modalMessage","savedArea","transform","show","opacity","fillColor"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport countdown from 'countdown'\nimport './Modal.css';\nimport 'react-notifications/lib/notifications.css';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nclass Modal extends Component {\n    createNotification = (type) => {\n        return () => {\n          switch (type) {\n            case 'info':\n              NotificationManager.info('Info message');\n              this.props.beginSiteTracker()\n              this.props.areasSubmitHandler()\n              this.props.close()\n            //   window.location.reload(false)\n            \n              break;\n            case 'success':\n              NotificationManager.success('Success message', 'Title here');\n              break;\n            case 'warning':\n              NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n              break;\n            case 'error':\n              NotificationManager.error('Error message', 'Click me!', 5000, () => {\n                alert('callback');\n              });\n              break;\n          }\n        };\n      };\n\n\n    state = {\n        timer: \"\"\n    }\n\n\n    componentDidMount(){\n        let initialDate  = new Date(this.props.selectedArea.date)\n        let expireDate = new Date(initialDate)\n        expireDate.setDate(initialDate.getDate()+3);\n        let cooldownDate = new Date(initialDate)\n        cooldownDate.setDate(initialDate.getDate()+14);\n\n        this.setState({timer: countdown(new Date(), expireDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n\n        setInterval(\n            () => this.setState({timer: countdown(new Date(), expireDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n            \n        )\n        \n        this.setState({cooldown: countdown(new Date(), cooldownDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n        setInterval(\n            () => this.setState({cooldown: countdown(new Date(), cooldownDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n            \n        )\n        // setInterval(\n        //     () => {\n        //         // if(expireDate > new Date() ){\n        //             this.props.updateSelectedAreaColor()\n        //         // }\n        //     },\n        //     3000\n            \n        // )\n\n    }\n  \n\n   \n\n   \n    cancel = (event) => {\n        this.props.removeLastAddedArea()\n        \n        \n    }\n\n    \n\n    // confirmSite = (event) => {\n    //     this.props.beginSiteTracker()\n    //     this.props.areasSubmitHandler()\n    //     this.props.close()\n    //     this.createNotification('info')\n    //     window.location.reload(false)\n      \n\n        \n    // };\n    \n    \n    render(){\n        \n        \n        let modalMessage = (\n            <div></div>\n\n        )\n        \n        if (this.props.selectedArea.savedArea == true){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site will expire in:</p>\n                    {   \n                        this.state.timer\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>\n\n            )\n            \n        }\n        else {\n            modalMessage =( \n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.cancel}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>Do you want to confirm this as your current site?</p>\n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.cancel}>Cancel</button>\n                        <button className=\"btn-continue\" onClick={this.createNotification('info')}>Confirm</button>\n                    </div>\n                    </div>\n                </div>\n                       \n                   \n            )\n        }\n        if (this.props.selectedArea.fillColor == \"red\"){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site is on cooldown for:</p>\n                    {   \n                        this.state.cooldown\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>\n\n            )\n            \n        }\n\n\n        return (\n\n            \n            <div>\n            \n            \n                    {modalMessage}\n                \n                    <NotificationContainer/>\n                </div>\n            \n            \n        );\n    }\n\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}