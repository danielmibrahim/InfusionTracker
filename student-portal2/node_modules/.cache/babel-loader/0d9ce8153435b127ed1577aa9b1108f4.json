{"ast":null,"code":"import _defineProperty from \"/Users/Danny/Documents/student-portal2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Danny/Documents/student-portal2/src/components/body/Body.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport isEqual from \"react-fast-compare\";\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\n\nclass Body extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoveredArea: null\n    };\n\n    this.enterArea = area => {\n      this.setState({\n        hoveredArea: area\n      });\n    };\n\n    this.leaveArea = area => {\n      this.setState({\n        hoveredArea: null\n      });\n    };\n\n    this.getTipPosition = area => {\n      return {\n        top: \"\".concat(area.center[1], \"px\"),\n        left: \"\".concat(area.center[0], \"px\")\n      };\n    };\n\n    this.getInitialState = () => {\n      return {\n        hoveredArea: null,\n        msg: null,\n        moveMsg: null\n      };\n    };\n\n    this.load = () => {\n      this.setState({\n        msg: \"Interact with image !\"\n      });\n    };\n\n    this.clickedOutside = evt => {\n      const coords = {\n        x: evt.nativeEvent.layerX,\n        y: evt.nativeEvent.layerY\n      };\n      this.setState({\n        msg: \"You clicked on the image at coords \".concat(JSON.stringify(coords), \" !\")\n      });\n    };\n\n    this.moveOnImage = evt => {\n      const coords = {\n        x: evt.nativeEvent.layerX,\n        y: evt.nativeEvent.layerY\n      };\n      this.setState({\n        moveMsg: \"You moved on the image at coords \".concat(JSON.stringify(coords), \" !\")\n      });\n    };\n\n    this.enterArea = area => {\n      this.setState({\n        hoveredArea: area\n      });\n    };\n\n    this.leaveArea = area => {\n      this.setState({\n        hoveredArea: null,\n        msg: \"You leaved \".concat(area.shape, \" \").concat(area.name, \" at coords \").concat(JSON.stringify(area.coords), \" !\")\n      });\n    };\n\n    this.moveOnArea = (area, evt) => {\n      const coords = {\n        x: evt.nativeEvent.layerX,\n        y: evt.nativeEvent.layerY\n      };\n      this.setState({\n        moveMsg: \"You moved on \".concat(area.shape, \" \").concat(area.name, \" at coords \").concat(JSON.stringify(coords), \" !\")\n      });\n    };\n\n    this.getTipPosition = area => {\n      return {\n        top: \"\".concat(area.center[1], \"px\"),\n        left: \"\".concat(area.center[0], \"px\")\n      };\n    };\n\n    this.toggleModal = area => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    };\n\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  //   clicked=(area) =>{\n  // \tthis.setState({\n  // \t\tmsg: `You clicked on ${area.shape} at coords ${JSON.stringify(\n  // \t\t\tarea.coords\n  // \t\t)} !`\n  // \t});\n  // }\n  render() {\n    let MAP = {\n      name: \"my-map\",\n      areas: [{\n        name: \"5\",\n        shape: \"circle\",\n        coords: [136, 181, 3],\n        preFillColor: \"blue\"\n      }]\n    };\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(ImageMapper, {\n      src: MaleBody,\n      map: MAP,\n      width: 610,\n      height: 435,\n      onLoad: () => this.load(),\n      onClick: area => this.toggleModal(area),\n      onMouseEnter: area => this.enterArea(area),\n      onMouseLeave: area => this.leaveArea(area),\n      onMouseMove: (area, _, evt) => this.moveOnArea(area, evt),\n      onImageClick: evt => this.clickedOutside(evt),\n      onImageMouseMove: evt => this.moveOnImage(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), this.state.hoveredArea ? React.createElement(\"span\", {\n      className: \"tooltip\",\n      style: _objectSpread({}, this.getTipPosition(this.state.hoveredArea)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.hoveredArea && this.state.hoveredArea.name) : null, React.createElement(\"button\", {\n      onClick: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Open the modal\"), React.createElement(Modal, {\n      show: this.state.isOpen,\n      onClose: this.toggleModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"USED SPOT\"));\n  }\n\n}\n\nexport default Body; // {/* ImageMapper.defaultProps = {\n// \tactive: true,\n// \tfillColor: \"rgba(255, 255, 255, 0.5)\",\n// \tlineWidth: 1,\n// \tmap: {\n// \t\tareas: [],\n// \t\tname: \"image-map-\" + Math.random()\n// \t},\n// \tstrokeColor: \"rgba(0, 0, 0, 0.5)\"\n// };\n// ImageMapper.propTypes = {\n// \tactive: PropTypes.bool,\n// \tfillColor: PropTypes.string,\n// \theight: PropTypes.number,\n// \timgWidth: PropTypes.number,\n// \tlineWidth: PropTypes.number,\n// \tsrc: PropTypes.string.isRequired,\n// \tstrokeColor: PropTypes.string,\n// \twidth: PropTypes.number,\n// \tonClick: PropTypes.func,\n// \tonMouseMove: PropTypes.func,\n// \tonImageClick: PropTypes.func,\n// \tonImageMouseMove: PropTypes.func,\n// \tonLoad: PropTypes.func,\n// \tonMouseEnter: PropTypes.func,\n// \tonMouseLeave: PropTypes.func,\n// \tmap: PropTypes.shape({\n// \t\tareas: PropTypes.arrayOf(\n// \t\t\tPropTypes.shape({\n// \t\t\t\tarea: PropTypes.shape({\n// \t\t\t\t\tcoords: PropTypes.arrayOf(PropTypes.number),\n// \t\t\t\t\thref: PropTypes.string,\n// \t\t\t\t\tshape: PropTypes.string,\n// \t\t\t\t\tpreFillColor: PropTypes.string,\n// \t\t\t\t\tfillColor: PropTypes.string\n// \t\t\t\t})\n// \t\t\t})\n// \t\t),\n// \t\tname: PropTypes.string\n// \t})\n// }; */}","map":{"version":3,"sources":["/Users/Danny/Documents/student-portal2/src/components/body/Body.js"],"names":["React","Component","PropTypes","isEqual","ImageMapper","MaleBody","Modal","Body","constructor","props","state","hoveredArea","enterArea","area","setState","leaveArea","getTipPosition","top","center","left","getInitialState","msg","moveMsg","load","clickedOutside","evt","coords","x","nativeEvent","layerX","y","layerY","JSON","stringify","moveOnImage","shape","name","moveOnArea","toggleModal","isOpen","render","MAP","areas","preFillColor","_"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\nimport isEqual from \"react-fast-compare\";\nimport  ImageMapper from 'react-image-mapper';\nimport  MaleBody  from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\n\n\nclass Body extends Component {\n   state = {\n    hoveredArea: null\n   }\n    enterArea= (area) =>{\n        this.setState({ hoveredArea: area });\n    }\n    \n    leaveArea=(area) =>{\n        this.setState({ hoveredArea: null });\n    }\n    \n    getTipPosition=(area) =>{\n        return { top: `${area.center[1]}px`, left: `${area.center[0]}px` };\n    }\n    getInitialState=() =>{\n\t\treturn { hoveredArea: null, msg: null, moveMsg: null };\n\t}\n\tload=() =>{\n\t\tthis.setState({ msg: \"Interact with image !\" });\n\t}\n\t\n\tclickedOutside=(evt) =>{\n\t\tconst coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n\t\tthis.setState({\n\t\t\tmsg: `You clicked on the image at coords ${JSON.stringify(coords)} !`\n\t\t});\n\t}\n\tmoveOnImage=(evt) =>{\n\t\tconst coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n\t\tthis.setState({\n\t\t\tmoveMsg: `You moved on the image at coords ${JSON.stringify(coords)} !`\n\t\t});\n\t}\n\tenterArea = (area) => {\n\t\tthis.setState({ hoveredArea: area });\n\t}\n\tleaveArea = (area) =>{\n\t\tthis.setState({\n\t\t\thoveredArea: null,\n\t\t\tmsg: `You leaved ${area.shape} ${area.name} at coords ${JSON.stringify(\n\t\t\t\tarea.coords\n\t\t\t)} !`\n\t\t});\n\t}\n\tmoveOnArea=(area, evt) =>{\n\t\tconst coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\n\t\tthis.setState({\n\t\t\tmoveMsg: `You moved on ${area.shape} ${\n\t\t\t\tarea.name\n\t\t\t} at coords ${JSON.stringify(coords)} !`\n\t\t});\n\t}\n\n\tgetTipPosition=(area) =>{\n\t\treturn { top: `${area.center[1]}px`, left: `${area.center[0]}px` };\n    }\n    \n    constructor(props) {\n        super(props);\n    \n        this.state = { isOpen: false };\n      }\n    \n      toggleModal = (area) => {\n        this.setState({\n          isOpen: !this.state.isOpen\n              \n          \n        });\n      }\n    //   clicked=(area) =>{\n\t// \tthis.setState({\n\t// \t\tmsg: `You clicked on ${area.shape} at coords ${JSON.stringify(\n\t// \t\t\tarea.coords\n\t// \t\t)} !`\n\t// \t});\n\t// }\n    render() {\n       let  MAP ={\n            name: \"my-map\",\n            areas: [\n            \n              { name: \"5\", shape: \"circle\", coords: [136, 181, 3 ], preFillColor: \"blue\"  },\n            ]\n          }\n        return (\n            <div className=\"container\" >\n    <ImageMapper src={MaleBody} map={MAP} width={610} height={435} \n    \tonLoad={() => this.load()}\n    \tonClick={area => this.toggleModal(area)}\n    \tonMouseEnter={area => this.enterArea(area)}\n    \tonMouseLeave={area => this.leaveArea(area)}\n    \tonMouseMove={(area, _, evt) => this.moveOnArea(area, evt)}\n    \tonImageClick={evt => this.clickedOutside(evt)}\n    \tonImageMouseMove={evt => this.moveOnImage(evt)}\n    />\n     {\n    \tthis.state.hoveredArea ? \n    \t<span className=\"tooltip\"\n    \t    style={{ ...this.getTipPosition(this.state.hoveredArea)}}>\n    \t\t{ this.state.hoveredArea && this.state.hoveredArea.name}\n    \t</span> : null\n    }\n     <button onClick={this.toggleModal}>\n          Open the modal\n        </button>\n    <Modal show={this.state.isOpen}\n          onClose={this.toggleModal}>\nUSED SPOT\n    </Modal>\n</div>\n\n               \n        );\n    }\n}\nexport default Body;\n// {/* ImageMapper.defaultProps = {\n// \tactive: true,\n// \tfillColor: \"rgba(255, 255, 255, 0.5)\",\n// \tlineWidth: 1,\n// \tmap: {\n// \t\tareas: [],\n// \t\tname: \"image-map-\" + Math.random()\n// \t},\n// \tstrokeColor: \"rgba(0, 0, 0, 0.5)\"\n// };\n\n// ImageMapper.propTypes = {\n// \tactive: PropTypes.bool,\n// \tfillColor: PropTypes.string,\n// \theight: PropTypes.number,\n// \timgWidth: PropTypes.number,\n// \tlineWidth: PropTypes.number,\n// \tsrc: PropTypes.string.isRequired,\n// \tstrokeColor: PropTypes.string,\n// \twidth: PropTypes.number,\n\n// \tonClick: PropTypes.func,\n// \tonMouseMove: PropTypes.func,\n// \tonImageClick: PropTypes.func,\n// \tonImageMouseMove: PropTypes.func,\n// \tonLoad: PropTypes.func,\n// \tonMouseEnter: PropTypes.func,\n// \tonMouseLeave: PropTypes.func,\n\n// \tmap: PropTypes.shape({\n// \t\tareas: PropTypes.arrayOf(\n// \t\t\tPropTypes.shape({\n// \t\t\t\tarea: PropTypes.shape({\n// \t\t\t\t\tcoords: PropTypes.arrayOf(PropTypes.number),\n// \t\t\t\t\thref: PropTypes.string,\n// \t\t\t\t\tshape: PropTypes.string,\n// \t\t\t\t\tpreFillColor: PropTypes.string,\n// \t\t\t\t\tfillColor: PropTypes.string\n// \t\t\t\t})\n// \t\t\t})\n// \t\t),\n// \t\tname: PropTypes.string\n// \t})\n// }; */}\n\n\n"]},"metadata":{},"sourceType":"module"}