{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/body/Body.js\";\nimport React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/Capstone/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\nclass Body extends Component {\n  constructor() {\n    super();\n\n    this.createNotification = type => {\n      return () => {\n        switch (type) {\n          case 'info':\n            NotificationManager.info('Info message');\n            break;\n\n          case 'success':\n            NotificationManager.success('Success message', 'Title here');\n            break;\n\n          case 'warning':\n            NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n            break;\n\n          case 'error':\n            NotificationManager.error('Error message', 'Click me!', 5000, () => {\n              alert('callback');\n            });\n            break;\n        }\n      };\n    };\n\n    this.updateSelectedAreaColor = () => {\n      console.log(\"Update selected area\");\n      let updateArea = this.state.areas.filter(area => {\n        return area.coords[0] == this.selectedArea.coords[0] && area.coords[1] == this.selectedArea.coords[1];\n      });\n      updateArea[0].fillColor = \"red\";\n      console.log(\"Updated color area ::> \", updateArea); //update the state with this new update area\n      //update database\n\n      let otherAreas = this.state.areas.filter(area => {\n        return area.coords[0] != this.selectedArea.coords[0] && area.coords[1] != this.selectedArea.coords[1];\n      }); // this.setState({ areas: [...otherAreas, updateArea]})\n    };\n\n    this.openModalHandler = area => {\n      console.log(\"selectedArea \", area);\n      this.setState({\n        isShowing: true,\n        selectedArea: area\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        isShowing: false\n      });\n    };\n\n    this.updateArea = evt => {\n      let newArea = {\n        name: \"1\",\n        shape: \"circle\",\n        coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5],\n        fillColor: \"green\",\n        preFillColor: \"green\"\n      }; // const areas = this.state.areas\n\n      this.setState({\n        areas: [...this.state.areas, newArea],\n        isShowing: true,\n        selectedArea: newArea\n      });\n    };\n\n    this.removeLastAddedArea = () => {\n      let areas = this.state.areas;\n      areas.pop();\n      this.setState({\n        areas: [...areas],\n        isShowing: false,\n        selectedArea: undefined\n      });\n    };\n\n    this.areasSubmitHandler = event => {\n      // event.preventDefault();\n      if (this.state.selectedArea.savedArea != true) {\n        const email = localStorage.getItem(\"loggedInStudent\");\n        console.log(\"area ::> \", this.state.selectedArea);\n        axios.post(\"http://localhost:8080/sites/add-site/\".concat(email), {\n          xCoord: this.state.selectedArea.coords[0],\n          yCoord: this.state.selectedArea.coords[1],\n          shape: this.state.selectedArea.shape,\n          fillColor: this.state.selectedArea.fillColor,\n          siteStudent: this.state.loggedInStudent\n        }).then(response => {}).catch(error => {});\n      }\n    };\n\n    this.beginSiteTracker = () => {\n      this.setState({\n        preFillColor: \"green\"\n      });\n    };\n\n    this.confirmMessage = \"Do you want to confirm this as your current infusion site location?\";\n    this.state = {\n      isShowing: false,\n      preFillColor: \"white\",\n      areas: [],\n      selectedArea: undefined\n    };\n  }\n\n  componentDidMount() {\n    const email = localStorage.getItem(\"loggedInStudent\");\n    console.log(\"area ::> \", email);\n    axios.get(\"http://localhost:8080/sites/findSites/\".concat(email)).then(response => {\n      console.log(response.data);\n      let areasFromDb = response.data.map((record, index) => {\n        return {\n          name: index,\n          shape: record.shape,\n          coords: [record.xCoord, record.yCoord, 5],\n          fillColor: record.fillColor,\n          preFillColor: record.fillColor,\n          date: record.dateStarted,\n          savedArea: true\n        };\n      });\n      this.setState({\n        areas: areasFromDb\n      });\n    }).catch(error => {});\n  }\n\n  render() {\n    let MAP = {\n      name: \"my-map\",\n      areas: this.state.areas\n    };\n    return (// <div>\n      // \t{this.state.isShowing ? <div onClick={this.closeModalHandler} ></div> : null}\n      // \t{\n      // \t\tthis.state.selectedArea?\n      // \t\t<Modal\n      // \t\t\tshow={this.state.isShowing}\n      // \t\t\tclose={this.closeModalHandler}\n      // \t\t\tbeginSiteTracker={this.beginSiteTracker}\n      // \t\t\tareasSubmitHandler={this.areasSubmitHandler}\n      // \t\t\tremoveLastAddedArea={this.removeLastAddedArea}\n      // \t\t\tselectedArea={this.state.selectedArea}\n      // \t\t\tupdateSelectedAreaColor={this.updateSelectedAreaColor}\n      // \t\t></Modal> : \"\"\n      // \t}\n      // \t<div className=\"imagemap\">\n      // \t\t<ImageMapper src={MaleBody} fillColor={this.state.preFillColor} map={MAP} width={710} height={535}\n      // \t\t\tbutton className=\"open-modal-btn\"\n      // \t\t\tonClick={(area) => this.openModalHandler(area)}\n      // \t\t\tonImageClick={(evt) => this.updateArea(evt)}\n      // \t\t>\n      // \t\t</ImageMapper>\n      // \t\t</div>\n      // \t</div>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-info\",\n        onClick: this.createNotification('info'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Info\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.createNotification('success'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Success\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: this.createNotification('warning'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Warning\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: this.createNotification('error'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"Error\"), React.createElement(NotificationContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/body/Body.js"],"names":["React","Component","ImageMapper","MaleBody","Modal","axios","NotificationContainer","NotificationManager","Body","constructor","createNotification","type","info","success","warning","error","alert","updateSelectedAreaColor","console","log","updateArea","state","areas","filter","area","coords","selectedArea","fillColor","otherAreas","openModalHandler","setState","isShowing","closeModalHandler","evt","newArea","name","shape","nativeEvent","layerX","layerY","preFillColor","removeLastAddedArea","pop","undefined","areasSubmitHandler","event","savedArea","email","localStorage","getItem","post","xCoord","yCoord","siteStudent","loggedInStudent","then","response","catch","beginSiteTracker","confirmMessage","componentDidMount","get","data","areasFromDb","map","record","index","date","dateStarted","render","MAP"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/Capstone/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nclass Body extends Component {\n\n\tcreateNotification = (type) => {\n\t\treturn () => {\n\t\t  switch (type) {\n\t\t\tcase 'info':\n\t\t\t  NotificationManager.info('Info message');\n\t\t\t  break;\n\t\t\tcase 'success':\n\t\t\t  NotificationManager.success('Success message', 'Title here');\n\t\t\t  break;\n\t\t\tcase 'warning':\n\t\t\t  NotificationManager.warning('Warning message', 'Close after 3000ms', 3000);\n\t\t\t  break;\n\t\t\tcase 'error':\n\t\t\t  NotificationManager.error('Error message', 'Click me!', 5000, () => {\n\t\t\t\talert('callback');\n\t\t\t  });\n\t\t\t  break;\n\t\t  }\n\t\t};\n\t  };\n\t\n\tconstructor() {\n\t\tsuper();\n\n\n\t\tthis.state = {\n\t\t\tisShowing: false,\n\t\t\tpreFillColor: \"white\",\n\t\t\tareas: [],\n\t\t\tselectedArea: undefined\n\n\t\t}\n\n\t}\n\n\tcomponentDidMount() {\n\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\tconsole.log(\"area ::> \", email)\n\t\taxios.get(`http://localhost:8080/sites/findSites/${email}`)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response.data)\n\t\t\t\tlet areasFromDb = response.data\n\t\t\t\t\t.map((record, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: index,\n\t\t\t\t\t\t\tshape: record.shape,\n\t\t\t\t\t\t\tcoords: [record.xCoord, record.yCoord, 5],\n\t\t\t\t\t\t\tfillColor: record.fillColor,\n\t\t\t\t\t\t\tpreFillColor: record.fillColor,\n\t\t\t\t\t\t\tdate: record.dateStarted,\n\t\t\t\t\t\t\tsavedArea: true\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\tthis.setState({ areas: areasFromDb })\n\t\t\t}).catch(error => {\n\t\t\t})\n\n\n\n\n\t}\n\n\tupdateSelectedAreaColor = () => {\n\t\tconsole.log(\"Update selected area\")\n\t\tlet updateArea = this.state.areas.filter(area => {\n\t\t\treturn area.coords[0] == this.selectedArea.coords[0] &&\n\t\t\t\tarea.coords[1] == this.selectedArea.coords[1]\n\t\t})\n\n\n\t\t\n\t\tupdateArea[0].fillColor = \"red\"\n\t\tconsole.log(\"Updated color area ::> \", updateArea)\n\t\t//update the state with this new update area\n\t\t//update database\n\n\t\tlet otherAreas =this.state.areas.filter(area => {\n\t\t\treturn area.coords[0] != this.selectedArea.coords[0] &&\n\t\t\t\tarea.coords[1] != this.selectedArea.coords[1]\n\t\t})\n\t\t// this.setState({ areas: [...otherAreas, updateArea]})\n\t\t\n\t}\n\n\topenModalHandler = (area) => {\n\t\tconsole.log(\"selectedArea \", area)\n\t\tthis.setState({\n\t\t\tisShowing: true,\n\t\t\tselectedArea: area\n\t\t});\n\t}\n\n\n\tcloseModalHandler = () => {\n\t\tthis.setState({\n\t\t\tisShowing: false\n\t\t});\n\t}\n\n\tupdateArea = (evt) => {\n\t\tlet newArea = { name: \"1\", shape: \"circle\", coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5], fillColor: \"green\", preFillColor: \"green\" }\n\t\t// const areas = this.state.areas\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...this.state.areas, newArea],\n\t\t\t\tisShowing: true,\n\t\t\t\tselectedArea: newArea\n\t\t\t}\n\t\t)\n\n\t}\n\n\tremoveLastAddedArea = () => {\n\t\tlet areas = this.state.areas\n\t\tareas.pop()\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...areas],\n\t\t\t\tisShowing: false,\n\t\t\t\tselectedArea: undefined\n\t\t\t}\n\t\t)\n\t}\n\n\tareasSubmitHandler = (event) => {\n\t\t// event.preventDefault();\n\t\tif (this.state.selectedArea.savedArea != true) {\n\t\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\t\tconsole.log(\"area ::> \", this.state.selectedArea)\t\n\t\t\taxios.post(`http://localhost:8080/sites/add-site/${email}`, {\n\t\t\t\txCoord: this.state.selectedArea.coords[0],\n\t\t\t\tyCoord: this.state.selectedArea.coords[1],\n\t\t\t\tshape: this.state.selectedArea.shape,\n\t\t\t\tfillColor: this.state.selectedArea.fillColor,\n\t\t\t\tsiteStudent: this.state.loggedInStudent\n\n\t\t\t})\n\t\t\t\t.then(response => {\n\n\t\t\t\t}).catch(error => {\n\t\t\t\t})\n\t\t}\n\n\t\t\n\n\n\t}\n\n\tbeginSiteTracker = () => {\n\n\t\tthis.setState({\n\t\t\tpreFillColor: \"green\"\n\n\t\t});\n\n\n\t}\n\n\tconfirmMessage = (\"Do you want to confirm this as your current infusion site location?\")\n\n\n\n\n\trender() {\n\t\n\t\t\n\n\n\t\tlet MAP = {\n\t\t\tname: \"my-map\",\n\t\t\tareas: this.state.areas\n\t\t}\n\n\n\t\treturn (\n\t\t  \n\t\t\t// <div>\n\t\t\t// \t{this.state.isShowing ? <div onClick={this.closeModalHandler} ></div> : null}\n\n\t\t\t\n\n\t\t\t// \t{\n\t\t\t// \t\tthis.state.selectedArea?\n\t\t\t// \t\t<Modal\n\t\t\t// \t\t\tshow={this.state.isShowing}\n\t\t\t// \t\t\tclose={this.closeModalHandler}\n\t\t\t// \t\t\tbeginSiteTracker={this.beginSiteTracker}\n\t\t\t// \t\t\tareasSubmitHandler={this.areasSubmitHandler}\n\t\t\t// \t\t\tremoveLastAddedArea={this.removeLastAddedArea}\n\t\t\t// \t\t\tselectedArea={this.state.selectedArea}\n\t\t\t// \t\t\tupdateSelectedAreaColor={this.updateSelectedAreaColor}\n\t\t\t\t\t\n\t\t\t// \t\t></Modal> : \"\"\n\t\t\t\t\n\t\t\t// \t}\n\n\t\t\t// \t<div className=\"imagemap\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t// \t\t<ImageMapper src={MaleBody} fillColor={this.state.preFillColor} map={MAP} width={710} height={535}\n\t\t\t// \t\t\tbutton className=\"open-modal-btn\"\n\n\n\t\t\t// \t\t\tonClick={(area) => this.openModalHandler(area)}\n\t\t\t// \t\t\tonImageClick={(evt) => this.updateArea(evt)}\n\n\t\t\t// \t\t>\n\n\n\t\t\t// \t\t</ImageMapper>\n\t\t\t// \t\t</div>\n\t\n\t\t\t// \t</div>\n\n\n\t\t  \n\n<div>\n<button className='btn btn-info'\n  onClick={this.createNotification('info')}>Info\n</button>\n<hr/>\n<button className='btn btn-success'\n  onClick={this.createNotification('success')}>Success\n</button>\n<hr/>\n<button className='btn btn-warning'\n  onClick={this.createNotification('warning')}>Warning\n</button>\n<hr/>\n<button className='btn btn-danger'\n  onClick={this.createNotification('error')}>Error\n</button>\n\n<NotificationContainer/>\n</div>\n\n\n\n\n\t\t);\n\t}\n}\n\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}