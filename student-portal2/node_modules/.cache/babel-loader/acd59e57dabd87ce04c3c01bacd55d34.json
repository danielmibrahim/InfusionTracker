{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/student-portal2/src/components/body/Body.js\";\nimport React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport Timer from 'react-compound-timer';\n\nclass Body extends Component {\n  constructor() {\n    super();\n\n    this.openModalHandler = area => {\n      console.log(\"selectedArea \", area);\n      this.setState({\n        isShowing: true,\n        selectedArea: area\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        isShowing: false\n      });\n    };\n\n    this.updateArea = evt => {\n      let newArea = {\n        name: \"1\",\n        shape: \"circle\",\n        coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 4],\n        preFillColor: this.state.preFillColor\n      }; // const areas = this.state.areas\n\n      this.setState({\n        areas: [...this.state.areas, newArea],\n        isShowing: true,\n        selectedArea: newArea\n      });\n    };\n\n    this.areasSubmitHandler = event => {\n      // event.preventDefault();\n      console.log(\"area ::> \", this.state.selectedArea);\n      axios.post('http://localhost:8080/sites/add-site?studentID=', {\n        xCoord: this.state.selectedArea.coords[0],\n        yCoord: this.state.selectedArea.coords[1],\n        shape: this.state.selectedArea.shape,\n        fillColor: this.state.selectedArea.fillColor,\n        siteStudent: this.state.loggedInStudent\n      }).then(response => {//navigate to a thank you page\n      }).catch(error => {// error handling goes here\n      });\n    };\n\n    this.beginSiteTracker = () => {\n      this.setState({\n        preFillColor: \"green\"\n      });\n    };\n\n    this.confirmMessage = \"Do you want to confirm this as your current infusion site location?\";\n    this.infusionTimer = React.createElement(Timer, {\n      initialTime: 55000,\n      direction: \"backward\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, () => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Timer.Days, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), \" days\", React.createElement(Timer.Hours, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), \" hours\", React.createElement(Timer.Minutes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), \" minutes\", React.createElement(Timer.Seconds, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), \" seconds\", React.createElement(Timer.Milliseconds, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), \" milliseconds\"));\n    this.state = {\n      isShowing: false,\n      preFillColor: \"white\",\n      areas: [],\n      selectedArea: undefined\n    };\n  }\n\n  render() {\n    if (this.state.areas.preFillColor = \"white\") {\n      this.message = this.confirmMessage;\n    } else {\n      this.message = this.infusionTimer;\n    }\n\n    console.log(this.state);\n    let MAP = {\n      name: \"my-map\",\n      areas: this.state.areas // areas: [\n      //   { name: \"1\", shape: \"circle\", coords: [132, 181, 3 ], fillColor: this.state.preFillColor, preFillColor: this.state.preFillColor  },\n      //   { name: \"2\", shape: \"circle\", coords: [145, 181, 3 ], fillColor: this.state.preFillColor, preFillColor: this.state.preFillColor  },\n      //   { name: \"3\", shape: \"circle\", coords: [191, 182, 3 ], fillColor: this.state.preFillColor, preFillColor: this.state.preFillColor  },\n      // ]\n\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.state.isShowing ? React.createElement(\"div\", {\n      onClick: this.closeModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }) : null, React.createElement(Modal, {\n      show: this.state.isShowing,\n      close: this.closeModalHandler,\n      beginSiteTracker: this.beginSiteTracker,\n      areasSubmitHandler: this.areasSubmitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.message), React.createElement(\"div\", {\n      className: \"imagemap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(ImageMapper, {\n      src: MaleBody,\n      fillColor: this.state.preFillColor,\n      map: MAP,\n      width: 610,\n      height: 435,\n      button: true,\n      className: \"open-modal-btn\",\n      onClick: area => this.openModalHandler(area),\n      onImageClick: evt => this.updateArea(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["/Users/Danny/Documents/student-portal2/src/components/body/Body.js"],"names":["React","Component","ImageMapper","MaleBody","Modal","axios","Timer","Body","constructor","openModalHandler","area","console","log","setState","isShowing","selectedArea","closeModalHandler","updateArea","evt","newArea","name","shape","coords","nativeEvent","layerX","layerY","preFillColor","state","areas","areasSubmitHandler","event","post","xCoord","yCoord","fillColor","siteStudent","loggedInStudent","then","response","catch","error","beginSiteTracker","confirmMessage","infusionTimer","undefined","render","message","MAP"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport  ImageMapper from 'react-image-mapper';\nimport  MaleBody  from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\nimport Timer from 'react-compound-timer'\n\n\nclass Body extends Component {\n\tconstructor() {\n        super();\n\n\n        this.state = {\n\t\t\tisShowing: false,\n\t\t\tpreFillColor: \"white\",\n\t\t\tareas: [],\n\t\t\tselectedArea: undefined\n\t\t\t\n\t\t}\n\t\t\n    }\n\n\n\n    openModalHandler = (area) => {\n\t\tconsole.log(\"selectedArea \", area)\n        this.setState({\n\t\t\tisShowing: true,\n\t\t\tselectedArea: area\n\t\t});\n    }\n\n\n    closeModalHandler = () => {\n        this.setState({\n            isShowing: false\n        });\n\t}\n\t\n\tupdateArea = (evt) => {\n\t\tlet newArea = { name: \"1\", shape: \"circle\", coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY , 4 ],  preFillColor: this.state.preFillColor  }\n\t\t// const areas = this.state.areas\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...this.state.areas, newArea],\n\t\t\t\tisShowing: true,\n\t\t\t\tselectedArea: newArea\n\t\t\t}\n\t\t)\n\n    }\n\n\tareasSubmitHandler = (event) => {\n\t\t// event.preventDefault();\n\t\tconsole.log(\"area ::> \",this.state.selectedArea)\n        axios.post('http://localhost:8080/sites/add-site?studentID=',{\n\t\t\txCoord: this.state.selectedArea.coords[0],\n\t\t\tyCoord: this.state.selectedArea.coords[1],\n\t\t\tshape: this.state.selectedArea.shape,\n\t\t\tfillColor: this.state.selectedArea.fillColor,\n\t\t\tsiteStudent: this.state.loggedInStudent\n\t\t})\n        .then(response => {\n            //navigate to a thank you page\n        }).catch(error => {\n            // error handling goes here\n        })\n\t\t\n       \n\n    }\n\t\n\tbeginSiteTracker = () => {\n\n\t\tthis.setState({ preFillColor: \"green\"\t\t\n\t\n\t});\n\n\t\n\t}\n\t\nconfirmMessage = (\"Do you want to confirm this as your current infusion site location?\")\n\ninfusionTimer = <Timer\ninitialTime={55000}\ndirection=\"backward\"\n>\n{() => (\n\t<React.Fragment>\n\t\t<Timer.Days /> days\n\t\t<Timer.Hours /> hours\n\t\t<Timer.Minutes /> minutes\n\t\t<Timer.Seconds /> seconds\n\t\t<Timer.Milliseconds /> milliseconds\n\t</React.Fragment>\n)}\n</Timer>\n\n    render() {\n\t\tif (this.state.areas.preFillColor = \"white\"){\n\t\tthis.message = this.confirmMessage\n\t\t}\n\t\telse {\n\t\t\tthis.message = this.infusionTimer\n\t\t}\n\t\t\n\t\t\n\t\tconsole.log(this.state)\n\t\t\n\n\t\t\n       let  MAP ={\n\t\t\tname: \"my-map\",\n\t\t\tareas: this.state.areas\n            // areas: [\n            //   { name: \"1\", shape: \"circle\", coords: [132, 181, 3 ], fillColor: this.state.preFillColor, preFillColor: this.state.preFillColor  },\n\t\t\t//   { name: \"2\", shape: \"circle\", coords: [145, 181, 3 ], fillColor: this.state.preFillColor, preFillColor: this.state.preFillColor  },\n\t\t\t//   { name: \"3\", shape: \"circle\", coords: [191, 182, 3 ], fillColor: this.state.preFillColor, preFillColor: this.state.preFillColor  },\n\n\t\t\t// ]\n          }\n\t\n\t\t\n\t\t  return (\n\t\t\t<div>\n\t\t\t{ this.state.isShowing ? <div onClick={this.closeModalHandler} ></div> : null }\n\t\t\t\n\t\t\t\n\t\t\t\t<Modal\n\t\t\t\tshow={this.state.isShowing}\n\t\t\t\tclose={this.closeModalHandler}\n\t\t\t\tbeginSiteTracker={this.beginSiteTracker}\n\t\t\t\tareasSubmitHandler={this.areasSubmitHandler}\n\n\t\t\t\t>\n\t\t\t\t\t\n\t\t\t\t\t{this.message}\n\n\t\t\t\t\t</Modal>\n\t\t\t\n\t\t<div className=\"imagemap\">\n\t\t\t\t\t<ImageMapper src={MaleBody} fillColor={this.state.preFillColor} map={MAP} width={610} height={435} \n\tbutton className=\"open-modal-btn\" \n\t\n\t\n\tonClick={(area) => this.openModalHandler(area)}\n\tonImageClick={(evt) => this.updateArea(evt)}\n\t\n    >\n\t\t\n\n\t\t\t</ImageMapper>\n\t\t\t</div>\n    </div>\n\t\t\t\n\n\t\n\n\t\n\n\t\n);\n}\n}\n\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}