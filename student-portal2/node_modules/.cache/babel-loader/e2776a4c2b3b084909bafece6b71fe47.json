{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/body/Body.js\";\nimport React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/Capstone/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\n\nclass Body extends Component {\n  constructor() {\n    super();\n\n    this.updateSelectedAreaColor = () => {\n      let updateArea = this.state.areas.filter(area => {\n        return area.coords[0] == this.selectedArea.coords[0] && area.coords[1] == this.selectedArea.coords[1];\n      });\n      updateArea[0].fillColor = \"red\";\n      console.log(\"Updated color area ::> \", updateArea); //update the state with this new update area\n      //update database\n\n      let otherAreas = this.state.areas.filter(area => {\n        return area.coords[0] != this.selectedArea.coords[0] && area.coords[1] != this.selectedArea.coords[1];\n      }); // this.setState({ areas: [...otherAreas, updateArea]})\n    };\n\n    this.openModalHandler = area => {\n      console.log(\"selectedArea \", area);\n      this.setState({\n        isShowing: true,\n        selectedArea: area\n      });\n    };\n\n    this.closeModalHandler = () => {\n      this.setState({\n        isShowing: false\n      });\n    };\n\n    this.updateArea = evt => {\n      let newArea = {\n        name: \"1\",\n        shape: \"circle\",\n        coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5],\n        fillColor: \"green\",\n        preFillColor: \"green\"\n      }; // const areas = this.state.areas\n\n      this.setState({\n        areas: [...this.state.areas, newArea],\n        isShowing: true,\n        selectedArea: newArea\n      });\n    };\n\n    this.removeLastAddedArea = () => {\n      let areas = this.state.areas;\n      areas.pop();\n      this.setState({\n        areas: [...areas],\n        isShowing: false,\n        selectedArea: undefined\n      });\n    };\n\n    this.areasSubmitHandler = event => {\n      // event.preventDefault();\n      if (this.state.selectedArea.savedArea != true) {\n        const email = localStorage.getItem(\"loggedInStudent\");\n        console.log(\"area ::> \", this.state.selectedArea);\n        axios.post(\"http://localhost:8080/sites/add-site/\".concat(email), {\n          xCoord: this.state.selectedArea.coords[0],\n          yCoord: this.state.selectedArea.coords[1],\n          shape: this.state.selectedArea.shape,\n          fillColor: this.state.selectedArea.fillColor,\n          siteStudent: this.state.loggedInStudent\n        }).then(response => {}).catch(error => {});\n      } // axios.get('http://localhost:8080/findSites')\n      // .then(response => {\n      //     this.setState(\n      //         {\n      //             siteLocations: response.data\n      //         }\n      //     )\n      // })\n\n    };\n\n    this.beginSiteTracker = () => {\n      this.setState({\n        preFillColor: \"green\"\n      });\n    };\n\n    this.confirmMessage = \"Do you want to confirm this as your current infusion site location?\";\n    this.state = {\n      isShowing: false,\n      preFillColor: \"white\",\n      areas: [],\n      selectedArea: undefined\n    };\n  }\n\n  componentDidMount() {\n    const email = localStorage.getItem(\"loggedInStudent\");\n    console.log(\"area ::> \", email);\n    axios.get(\"http://localhost:8080/sites/findSites/\".concat(email)).then(response => {\n      console.log(response.data);\n      let areasFromDb = response.data.map((record, index) => {\n        return {\n          name: index,\n          shape: record.shape,\n          coords: [record.xCoord, record.yCoord, 5],\n          fillColor: record.fillColor,\n          preFillColor: record.fillColor,\n          date: record.dateStarted,\n          savedArea: true\n        };\n      });\n      this.setState({\n        areas: areasFromDb\n      });\n    }).catch(error => {});\n  }\n\n  render() {\n    let MAP = {\n      name: \"my-map\",\n      areas: this.state.areas\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.state.isShowing ? React.createElement(\"div\", {\n      onClick: this.closeModalHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }) : null, this.state.selectedArea ? React.createElement(Modal, {\n      show: this.state.isShowing,\n      close: this.closeModalHandler,\n      beginSiteTracker: this.beginSiteTracker,\n      areasSubmitHandler: this.areasSubmitHandler,\n      removeLastAddedArea: this.removeLastAddedArea,\n      selectedArea: this.state.selectedArea,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }) : \"\", React.createElement(\"div\", {\n      className: \"imagemap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(ImageMapper, {\n      src: MaleBody,\n      fillColor: this.state.preFillColor,\n      map: MAP,\n      width: 710,\n      height: 535,\n      button: true,\n      className: \"open-modal-btn\",\n      onClick: area => this.openModalHandler(area),\n      onImageClick: evt => this.updateArea(evt),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/body/Body.js"],"names":["React","Component","ImageMapper","MaleBody","Modal","axios","Body","constructor","updateSelectedAreaColor","updateArea","state","areas","filter","area","coords","selectedArea","fillColor","console","log","otherAreas","openModalHandler","setState","isShowing","closeModalHandler","evt","newArea","name","shape","nativeEvent","layerX","layerY","preFillColor","removeLastAddedArea","pop","undefined","areasSubmitHandler","event","savedArea","email","localStorage","getItem","post","xCoord","yCoord","siteStudent","loggedInStudent","then","response","catch","error","beginSiteTracker","confirmMessage","componentDidMount","get","data","areasFromDb","map","record","index","date","dateStarted","render","MAP"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport MaleBody from '/Users/Danny/Documents/Capstone/student-portal2/src/images/MaleBody.jpg';\nimport Modal from '../modal/Modal';\nimport axios from 'axios';\n\n\n\nclass Body extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\n\t\tthis.state = {\n\t\t\tisShowing: false,\n\t\t\tpreFillColor: \"white\",\n\t\t\tareas: [],\n\t\t\tselectedArea: undefined\n\n\t\t}\n\n\t}\n\n\tcomponentDidMount() {\n\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\tconsole.log(\"area ::> \", email)\n\t\taxios.get(`http://localhost:8080/sites/findSites/${email}`)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response.data)\n\t\t\t\tlet areasFromDb = response.data\n\t\t\t\t\t.map((record, index) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: index,\n\t\t\t\t\t\t\tshape: record.shape,\n\t\t\t\t\t\t\tcoords: [record.xCoord, record.yCoord, 5],\n\t\t\t\t\t\t\tfillColor: record.fillColor,\n\t\t\t\t\t\t\tpreFillColor: record.fillColor,\n\t\t\t\t\t\t\tdate: record.dateStarted,\n\t\t\t\t\t\t\tsavedArea: true\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\tthis.setState({ areas: areasFromDb })\n\t\t\t}).catch(error => {\n\t\t\t})\n\n\n\n\n\t}\n\n\tupdateSelectedAreaColor = () => {\n\t\tlet updateArea = this.state.areas.filter(area => {\n\t\t\treturn area.coords[0] == this.selectedArea.coords[0] &&\n\t\t\t\tarea.coords[1] == this.selectedArea.coords[1]\n\t\t})\n\n\n\t\t\n\t\tupdateArea[0].fillColor = \"red\"\n\t\tconsole.log(\"Updated color area ::> \", updateArea)\n\t\t//update the state with this new update area\n\t\t//update database\n\n\t\tlet otherAreas =this.state.areas.filter(area => {\n\t\t\treturn area.coords[0] != this.selectedArea.coords[0] &&\n\t\t\t\tarea.coords[1] != this.selectedArea.coords[1]\n\t\t})\n\t\t// this.setState({ areas: [...otherAreas, updateArea]})\n\t\t\n\t}\n\n\topenModalHandler = (area) => {\n\t\tconsole.log(\"selectedArea \", area)\n\t\tthis.setState({\n\t\t\tisShowing: true,\n\t\t\tselectedArea: area\n\t\t});\n\t}\n\n\n\tcloseModalHandler = () => {\n\t\tthis.setState({\n\t\t\tisShowing: false\n\t\t});\n\t}\n\n\tupdateArea = (evt) => {\n\t\tlet newArea = { name: \"1\", shape: \"circle\", coords: [evt.nativeEvent.layerX, evt.nativeEvent.layerY, 5], fillColor: \"green\", preFillColor: \"green\" }\n\t\t// const areas = this.state.areas\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...this.state.areas, newArea],\n\t\t\t\tisShowing: true,\n\t\t\t\tselectedArea: newArea\n\t\t\t}\n\t\t)\n\n\t}\n\n\tremoveLastAddedArea = () => {\n\t\tlet areas = this.state.areas\n\t\tareas.pop()\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tareas: [...areas],\n\t\t\t\tisShowing: false,\n\t\t\t\tselectedArea: undefined\n\t\t\t}\n\t\t)\n\t}\n\n\tareasSubmitHandler = (event) => {\n\t\t// event.preventDefault();\n\t\tif (this.state.selectedArea.savedArea != true) {\n\t\t\tconst email = localStorage.getItem(\"loggedInStudent\");\n\t\t\tconsole.log(\"area ::> \", this.state.selectedArea)\t\n\t\t\taxios.post(`http://localhost:8080/sites/add-site/${email}`, {\n\t\t\t\txCoord: this.state.selectedArea.coords[0],\n\t\t\t\tyCoord: this.state.selectedArea.coords[1],\n\t\t\t\tshape: this.state.selectedArea.shape,\n\t\t\t\tfillColor: this.state.selectedArea.fillColor,\n\t\t\t\tsiteStudent: this.state.loggedInStudent\n\n\t\t\t})\n\t\t\t\t.then(response => {\n\n\t\t\t\t}).catch(error => {\n\t\t\t\t})\n\t\t}\n\n\t\t// axios.get('http://localhost:8080/findSites')\n\t\t// .then(response => {\n\t\t//     this.setState(\n\t\t//         {\n\t\t//             siteLocations: response.data\n\t\t//         }\n\t\t//     )\n\t\t// })\n\n\n\n\t}\n\n\tbeginSiteTracker = () => {\n\n\t\tthis.setState({\n\t\t\tpreFillColor: \"green\"\n\n\t\t});\n\n\n\t}\n\n\tconfirmMessage = (\"Do you want to confirm this as your current infusion site location?\")\n\n\n\n\trender() {\n\t\n\n\n\t\tlet MAP = {\n\t\t\tname: \"my-map\",\n\t\t\tareas: this.state.areas\n\t\t}\n\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.isShowing ? <div onClick={this.closeModalHandler} ></div> : null}\n\n\t\t\t\t{\n\t\t\t\t\tthis.state.selectedArea?\n\t\t\t\t\t<Modal\n\t\t\t\t\t\tshow={this.state.isShowing}\n\t\t\t\t\t\tclose={this.closeModalHandler}\n\t\t\t\t\t\tbeginSiteTracker={this.beginSiteTracker}\n\t\t\t\t\t\tareasSubmitHandler={this.areasSubmitHandler}\n\t\t\t\t\t\tremoveLastAddedArea={this.removeLastAddedArea}\n\t\t\t\t\t\tselectedArea={this.state.selectedArea}\n\t\t\t\t\t\n\t\t\t\t\t></Modal> : \"\"\n\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t<div className=\"imagemap\">\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<ImageMapper src={MaleBody} fillColor={this.state.preFillColor} map={MAP} width={710} height={535}\n\t\t\t\t\t\tbutton className=\"open-modal-btn\"\n\n\n\t\t\t\t\t\tonClick={(area) => this.openModalHandler(area)}\n\t\t\t\t\t\tonImageClick={(evt) => this.updateArea(evt)}\n\n\t\t\t\t\t>\n\n\n\t\t\t\t\t</ImageMapper>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\n\n\n\n\n\n\n\t\t);\n\t}\n}\n\n\nexport default Body;"]},"metadata":{},"sourceType":"module"}