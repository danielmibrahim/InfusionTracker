{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/student-portal2/src/components/home/Home.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link, Route } from 'react-router-dom';\nimport StudentLife from './student-life/student-life/StudentLife';\nimport MaleBody from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport ImageMapper from 'react-image-mapper';\nconfigure({\n  adapter: new Adapter()\n});\nconst URL = 'https://c1.staticflickr.com/5/4052/4503898393_303cfbc9fd_b.jpg';\nconst MAP = {\n  name: 'my-map',\n  areas: [{\n    shape: 'poly',\n    coords: [25, 33, 27, 300, 128, 240, 128, 94]\n  }, {\n    shape: 'poly',\n    coords: [219, 118, 220, 210, 283, 210, 284, 119]\n  }, {\n    shape: 'poly',\n    coords: [381, 241, 383, 94, 462, 53, 457, 282]\n  }, {\n    shape: 'poly',\n    coords: [245, 285, 290, 285, 274, 239, 249, 238]\n  }]\n};\n\nconst render = props => {\n  const wrapper = mount(React.createElement(ImageMapper, Object.assign({\n    src: URL,\n    map: MAP\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  })));\n  const instance = wrapper.instance();\n  instance.canvas = {\n    getContext: () => ({})\n  };\n  instance.initCanvas();\n  return instance;\n};\n\ndescribe('ImageMapper', () => {\n  describe('when width prop is provided', () => {\n    it('container width should be equal to width prop', () => {\n      const instance = render({\n        width: 100\n      });\n      const containerStyles = instance.container.style;\n      expect(containerStyles).to.have.property('width');\n      expect(containerStyles.width).to.equal('100px');\n    });\n    it('canvas width should be equal to width prop', () => {\n      const instance = render({\n        width: 100\n      });\n      const canvas = instance.canvas;\n      expect(canvas).to.have.property('width');\n      expect(canvas.width).to.equal(100);\n    });\n    it('image width should be equal to width prop', () => {\n      const instance = render({\n        width: 100\n      });\n      const img = instance.img;\n      expect(img).to.have.property('width');\n      expect(img.width).to.equal(100);\n    });\n  });\n  describe('when height prop is provided', () => {\n    it('container height should be equal to height prop', () => {\n      const instance = render({\n        height: 100\n      });\n      const containerStyles = instance.container.style;\n      expect(containerStyles).to.have.property('height');\n      expect(containerStyles.height).to.equal('100px');\n    });\n    it('canvas height should be equal to height prop', () => {\n      const instance = render({\n        height: 100\n      });\n      const canvas = instance.canvas;\n      expect(canvas).to.have.property('height');\n      expect(canvas.height).to.equal(100);\n    });\n    it('img height should be equal to height prop', () => {\n      const instance = render({\n        height: 100\n      });\n      const img = instance.img;\n      expect(img).to.have.property('height');\n      expect(img.height).to.equal(100);\n    });\n  });\n  describe('when onClick prop is provided', () => {\n    it('map styles should have \"cursor:pointer\"', () => {\n      const wrapper = mount(React.createElement(ImageMapper, {\n        src: URL,\n        map: MAP,\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n      const mapStyles = wrapper.find('map').get(0).props.style;\n      expect(mapStyles).to.have.property('cursor');\n      expect(mapStyles.cursor).to.equal('pointer');\n    });\n  });\n});\nexport default Home;","map":{"version":3,"sources":["/Users/Danny/Documents/student-portal2/src/components/home/Home.js"],"names":["React","Component","axios","Link","Route","StudentLife","MaleBody","ImageMapper","configure","adapter","Adapter","URL","MAP","name","areas","shape","coords","render","props","wrapper","mount","instance","canvas","getContext","initCanvas","describe","it","width","containerStyles","container","style","expect","to","have","property","equal","img","height","mapStyles","find","get","cursor","Home"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link, Route } from 'react-router-dom';\nimport StudentLife from './student-life/student-life/StudentLife';\nimport  MaleBody  from '/Users/Danny/Documents/student-portal2/src/images/MaleBody.jpg';\nimport ImageMapper from 'react-image-mapper';\nconfigure({ adapter: new Adapter() });\n\nconst URL = 'https://c1.staticflickr.com/5/4052/4503898393_303cfbc9fd_b.jpg';\nconst MAP = {\n\tname: 'my-map',\n\tareas: [\n\t\t{ shape: 'poly', coords: [25,33,27,300,128,240,128,94] },\n\t\t{ shape: 'poly', coords: [219,118,220,210,283,210,284,119] },\n\t\t{ shape: 'poly', coords: [381,241,383,94,462,53,457,282] },\n\t\t{ shape: 'poly', coords: [245,285,290,285,274,239,249,238] },\n\t]\n};\n\nconst render = (props) => {\n\tconst wrapper = mount(<ImageMapper src={URL} map={MAP} {...props} />);\n\tconst instance = wrapper.instance();\n\tinstance.canvas = { getContext: () => ({}) };\n\tinstance.initCanvas();\n\n\treturn instance;\n};\n\ndescribe('ImageMapper', () => {\n\tdescribe('when width prop is provided', () => {\n\t\tit('container width should be equal to width prop', () => {\n\t\t\tconst instance = render({ width: 100 });\n\t\t\tconst containerStyles = instance.container.style;\n\t\t\t\n\t\t\texpect(containerStyles).to.have.property('width');\n\t\t\texpect(containerStyles.width).to.equal('100px');\n\t\t});\n\n\t\tit('canvas width should be equal to width prop', () => {\n\t\t\tconst instance = render({ width: 100 });\n\t\t\tconst canvas = instance.canvas;\n\t\t\t\n\t\t\texpect(canvas).to.have.property('width');\n\t\t\texpect(canvas.width).to.equal(100);\n\t\t});\n\n\t\tit('image width should be equal to width prop', () => {\n\t\t\tconst instance = render({ width: 100 });\n\t\t\tconst img = instance.img;\n\t\t\t\n\t\t\texpect(img).to.have.property('width');\n\t\t\texpect(img.width).to.equal(100);\n\t\t});\n\t});\n\n\tdescribe('when height prop is provided', () => {\n\t\tit('container height should be equal to height prop', () => {\n\t\t\tconst instance = render({ height: 100 });\n\t\t\tconst containerStyles = instance.container.style;\n\t\t\t\n\t\t\texpect(containerStyles).to.have.property('height');\n\t\t\texpect(containerStyles.height).to.equal('100px');\n\t\t});\n\n\t\tit('canvas height should be equal to height prop', () => {\n\t\t\tconst instance = render({ height: 100 });\n\t\t\tconst canvas = instance.canvas;\n\t\t\t\n\t\t\texpect(canvas).to.have.property('height');\n\t\t\texpect(canvas.height).to.equal(100);\n\t\t});\n\n\t\tit('img height should be equal to height prop', () => {\n\t\t\tconst instance = render({ height: 100 });\n\t\t\tconst img = instance.img;\n\t\t\t\n\t\t\texpect(img).to.have.property('height');\n\t\t\texpect(img.height).to.equal(100);\n\t\t});\n\t});\n\n\tdescribe('when onClick prop is provided', () => {\n\t\tit('map styles should have \"cursor:pointer\"', () => {\n\t\t\tconst wrapper = mount(<ImageMapper src={URL} map={MAP} onClick={() => {}} />);\n\t\t\tconst mapStyles = wrapper.find('map').get(0).props.style;\n\n\t\t\texpect(mapStyles).to.have.property('cursor');\n\t\t\texpect(mapStyles.cursor).to.equal('pointer');\n\t\t});\n\t});\n});\nexport default Home;"]},"metadata":{},"sourceType":"module"}