{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js\";\nimport React, { Component } from 'react';\nimport countdown from 'countdown';\nimport './Modal.css';\n\nclass Modal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timer: \"\"\n    };\n\n    this.cancel = event => {\n      this.props.removeLastAddedArea();\n    };\n\n    this.confirmSite = event => {\n      this.props.beginSiteTracker();\n      this.props.areasSubmitHandler();\n      this.props.close();\n    };\n  }\n\n  componentDidMount() {\n    let initialDate = new Date(this.props.selectedArea.date);\n    let expireDate = new Date(initialDate);\n    expireDate.setDate(initialDate.getDate() + 3);\n    this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000);\n    cooldown(() => this.props.setState.selectedArea.fillColor(\"red\"));\n\n    if (expireDate < initialDate) {\n      cooldown();\n    }\n  }\n\n  render() {\n    let modalMessage = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n\n    if (this.props.selectedArea.savedArea == true) {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"This site will expire in:\"), this.state.timer), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Close\"))));\n    } else {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Do you want to confirm this as your current site?\")), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        className: \"btn-continue\",\n        onClick: this.confirmSite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Confirm\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, modalMessage);\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js"],"names":["React","Component","countdown","Modal","state","timer","cancel","event","props","removeLastAddedArea","confirmSite","beginSiteTracker","areasSubmitHandler","close","componentDidMount","initialDate","Date","selectedArea","date","expireDate","setDate","getDate","setState","DAYS","HOURS","MINUTES","SECONDS","toString","setInterval","cooldown","fillColor","render","modalMessage","savedArea","transform","show","opacity"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport countdown from 'countdown'\nimport './Modal.css';\n\n\nclass Modal extends Component {\n\n    state = {\n        timer: \"\"\n        \n    }\n\n    componentDidMount(){\n        let initialDate  = new Date(this.props.selectedArea.date)\n        let expireDate = new Date(initialDate)\n        expireDate.setDate(initialDate.getDate()+3);\n        this.setState({timer: countdown(new Date(), expireDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n\n        setInterval(\n            () => this.setState({timer: countdown(new Date(), expireDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n        )\n        \n        cooldown (\n            () => this.props.setState.selectedArea.fillColor(\"red\")\n        )\n       \n            if (expireDate < initialDate){\n                cooldown()\n            }\n        \n    }\n\n    cancel = (event) => {\n        this.props.removeLastAddedArea()\n    }\n\n    \n\n    confirmSite = (event) => {\n        this.props.beginSiteTracker()\n        this.props.areasSubmitHandler()\n        this.props.close()\n\n    };\n    \n    render(){\n        \n        let modalMessage = (\n            <div></div>\n\n        )\n        \n        if (this.props.selectedArea.savedArea == true){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site will expire in:</p>\n                    {   \n                        this.state.timer\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                </div>\n\n            )\n            \n        }\n        else {\n            modalMessage =( \n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.cancel}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>Do you want to confirm this as your current site?</p>\n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.cancel}>Cancel</button>\n                        <button className=\"btn-continue\" onClick={this.confirmSite}>Confirm</button>\n                    </div>\n                    </div>\n                </div>\n                       \n                   \n            )\n        }\n\n\n        return (\n            <div>\n            \n                    {modalMessage}\n                \n                    \n                </div>\n            \n        );\n    }\n\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}