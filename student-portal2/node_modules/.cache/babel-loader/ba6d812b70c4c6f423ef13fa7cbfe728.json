{"ast":null,"code":"var _jsxFileName = \"/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js\";\nimport React, { Component } from 'react';\nimport countdown from 'countdown';\nimport './Modal.css';\n\nclass Modal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timer: \"\"\n    };\n\n    this.handleChangeColor = newColor => {// let turnToRed = this.props.selectedArea.fillColor({\n      //   fillColor: newColor\n      // })\n    };\n\n    this.cancel = event => {\n      this.props.removeLastAddedArea();\n    };\n\n    this.confirmSite = event => {\n      this.props.beginSiteTracker();\n      this.props.areasSubmitHandler();\n      this.props.close();\n      window.location.reload(false);\n    };\n  }\n\n  componentDidMount() {\n    let initialDate = new Date(this.props.selectedArea.date);\n    let expireDate = new Date(initialDate);\n    expireDate.setDate(initialDate.getDate() + 3);\n    let cooldownDate = new Date(initialDate);\n    cooldownDate.setDate(initialDate.getDate() + 14);\n    this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      timer: countdown(new Date(), expireDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000);\n    this.setState({\n      cooldown: countdown(new Date(), cooldownDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    });\n    setInterval(() => this.setState({\n      cooldown: countdown(new Date(), cooldownDate, countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS).toString()\n    }), 1000); // setInterval(\n    //     () => {\n    //         // if(expireDate > new Date() ){\n    //             this.props.updateSelectedAreaColor()\n    //         // }\n    //     },\n    //     3000\n    // )\n  }\n\n  componentDidMount() {// this.timer = setTimeout(\n    //   () => this.handleChangeColor(\"red\"),\n    //   1000*3 // in milliseconds, 3s for fast show\n    // )\n  }\n\n  render() {\n    let modalMessage = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n\n    if (this.props.selectedArea.savedArea == true) {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"This site will expire in:\"), this.state.timer), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Close\"))));\n    } else {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Do you want to confirm this as your current site?\")), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.cancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(\"button\", {\n        className: \"btn-continue\",\n        onClick: this.confirmSite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Confirm\"))));\n    }\n\n    if (this.props.selectedArea.fillColor == \"red\") {\n      modalMessage = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-wrapper\",\n        style: {\n          transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n          opacity: this.props.show ? '1' : '0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"modal-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Infusion Tracker\"), React.createElement(\"span\", {\n        className: \"close-modal-btn\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"\\xD7\")), React.createElement(\"div\", {\n        className: \"modal-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"This site is on cooldown for:\"), this.state.cooldown), React.createElement(\"div\", {\n        className: \"modal-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn-cancel\",\n        onClick: this.props.close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Close\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, modalMessage);\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/Users/Danny/Documents/Capstone/student-portal2/src/components/modal/Modal.js"],"names":["React","Component","countdown","Modal","state","timer","handleChangeColor","newColor","cancel","event","props","removeLastAddedArea","confirmSite","beginSiteTracker","areasSubmitHandler","close","window","location","reload","componentDidMount","initialDate","Date","selectedArea","date","expireDate","setDate","getDate","cooldownDate","setState","DAYS","HOURS","MINUTES","SECONDS","toString","setInterval","cooldown","render","modalMessage","savedArea","transform","show","opacity","fillColor"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport countdown from 'countdown'\nimport './Modal.css';\n\n\nclass Modal extends Component {\n\n    state = {\n        timer: \"\"\n    }\n\n    componentDidMount(){\n        let initialDate  = new Date(this.props.selectedArea.date)\n        let expireDate = new Date(initialDate)\n        expireDate.setDate(initialDate.getDate()+3);\n        let cooldownDate = new Date(initialDate)\n        cooldownDate.setDate(initialDate.getDate()+14);\n\n        this.setState({timer: countdown(new Date(), expireDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n\n        setInterval(\n            () => this.setState({timer: countdown(new Date(), expireDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n            \n        )\n        \n        this.setState({cooldown: countdown(new Date(), cooldownDate,countdown.DAYS| countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()})\n        setInterval(\n            () => this.setState({cooldown: countdown(new Date(), cooldownDate, countdown.DAYS|countdown.HOURS|countdown.MINUTES|countdown.SECONDS).toString()}),\n            1000\n            \n        )\n        // setInterval(\n        //     () => {\n        //         // if(expireDate > new Date() ){\n        //             this.props.updateSelectedAreaColor()\n        //         // }\n        //     },\n        //     3000\n            \n        // )\n\n    }\n  \n\n    handleChangeColor = (newColor) => {\n        // let turnToRed = this.props.selectedArea.fillColor({\n        //   fillColor: newColor\n        // })\n      }\n\n      componentDidMount() {\n        \n        // this.timer = setTimeout(\n        //   () => this.handleChangeColor(\"red\"),\n        //   1000*3 // in milliseconds, 3s for fast show\n        // )\n      }\n\n   \n    cancel = (event) => {\n        this.props.removeLastAddedArea()\n        \n        \n    }\n\n    \n\n    confirmSite = (event) => {\n        this.props.beginSiteTracker()\n        this.props.areasSubmitHandler()\n        this.props.close()\n        window.location.reload(false)\n\n        \n    };\n    \n    \n    render(){\n        \n        let modalMessage = (\n            <div></div>\n\n        )\n        \n        if (this.props.selectedArea.savedArea == true){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site will expire in:</p>\n                    {   \n                        this.state.timer\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>\n\n            )\n            \n        }\n        else {\n            modalMessage =( \n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.cancel}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>Do you want to confirm this as your current site?</p>\n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.cancel}>Cancel</button>\n                        <button className=\"btn-continue\" onClick={this.confirmSite}>Confirm</button>\n                    </div>\n                    </div>\n                </div>\n                       \n                   \n            )\n        }\n        if (this.props.selectedArea.fillColor == \"red\"){\n            modalMessage=(\n                <div>\n                <div className=\"modal-wrapper\"\n                    style={{\n                        transform: this.props.show ? 'translateY(0vh)' : 'translateY(-100vh)',\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n                    <div className=\"modal-header\">\n                        <h3>Infusion Tracker</h3>\n                        <span className=\"close-modal-btn\" onClick={this.props.close}>×</span>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <p>This site is on cooldown for:</p>\n                    {   \n                        this.state.cooldown\n                    }\n                    \n                    \n                    </div> \n                    <div className=\"modal-footer\">\n                    <button className=\"btn-cancel\" onClick={this.props.close}>Close</button>\n                    </div>\n                    </div>\n                    \n                </div>\n\n            )\n            \n        }\n\n\n        return (\n            <div>\n            \n                    {modalMessage}\n                \n                    \n                </div>\n            \n        );\n    }\n\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}